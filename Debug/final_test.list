
final_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036e8  080001b0  080001b0  000011b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08003898  08003898  00004898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cc0  08003cc0  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003cc0  08003cc0  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003cc0  08003cc0  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc0  08003cc0  00004cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003cc4  08003cc4  00004cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003cc8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000005c  08003d24  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08003d24  000051f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e32  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001643  00000000  00000000  0000aebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  0000c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004ab  00000000  00000000  0000cb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028840  00000000  00000000  0000d02b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000815e  00000000  00000000  0003586b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2d5f  00000000  00000000  0003d9c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dfc  00000000  00000000  0013076c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00132568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003880 	.word	0x08003880

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003880 	.word	0x08003880

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2iz>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000994:	d215      	bcs.n	80009c2 <__aeabi_d2iz+0x36>
 8000996:	d511      	bpl.n	80009bc <__aeabi_d2iz+0x30>
 8000998:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d912      	bls.n	80009c8 <__aeabi_d2iz+0x3c>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b2:	fa23 f002 	lsr.w	r0, r3, r2
 80009b6:	bf18      	it	ne
 80009b8:	4240      	negne	r0, r0
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009c6:	d105      	bne.n	80009d4 <__aeabi_d2iz+0x48>
 80009c8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009cc:	bf08      	it	eq
 80009ce:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_d2f>:
 80009dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009e4:	bf24      	itt	cs
 80009e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009ee:	d90d      	bls.n	8000a0c <__aeabi_d2f+0x30>
 80009f0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009fc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a04:	bf08      	it	eq
 8000a06:	f020 0001 	biceq.w	r0, r0, #1
 8000a0a:	4770      	bx	lr
 8000a0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a10:	d121      	bne.n	8000a56 <__aeabi_d2f+0x7a>
 8000a12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a16:	bfbc      	itt	lt
 8000a18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a1c:	4770      	bxlt	lr
 8000a1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a26:	f1c2 0218 	rsb	r2, r2, #24
 8000a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a32:	fa20 f002 	lsr.w	r0, r0, r2
 8000a36:	bf18      	it	ne
 8000a38:	f040 0001 	orrne.w	r0, r0, #1
 8000a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a48:	ea40 000c 	orr.w	r0, r0, ip
 8000a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a54:	e7cc      	b.n	80009f0 <__aeabi_d2f+0x14>
 8000a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a5a:	d107      	bne.n	8000a6c <__aeabi_d2f+0x90>
 8000a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a60:	bf1e      	ittt	ne
 8000a62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a6a:	4770      	bxne	lr
 8000a6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	0000      	movs	r0, r0
	...

08000a80 <DAC_Write_Volt>:
 * authors  : AJ Gregory
 * version  : 0.0
 * date     : 05.14.25
 * -------------------------------------------------------------------------- */
void DAC_Write_Volt(int voltage)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	// Calculate need for output gain on DAC
	int gain;
	if(voltage >= MAX_VOLT)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f640 42e3 	movw	r2, #3299	@ 0xce3
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	dd31      	ble.n	8000af6 <DAC_Write_Volt+0x76>
	{
		voltage = 3300 / 2;
 8000a92:	f240 6372 	movw	r3, #1650	@ 0x672
 8000a96:	607b      	str	r3, [r7, #4]
		voltage = (int) (((float) voltage) - 0.5793);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	ee07 3a90 	vmov	s15, r3
 8000a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aa2:	ee17 0a90 	vmov	r0, s15
 8000aa6:	f7ff fd07 	bl	80004b8 <__aeabi_f2d>
 8000aaa:	a35a      	add	r3, pc, #360	@ (adr r3, 8000c14 <DAC_Write_Volt+0x194>)
 8000aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab0:	f7ff fba2 	bl	80001f8 <__aeabi_dsub>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	4610      	mov	r0, r2
 8000aba:	4619      	mov	r1, r3
 8000abc:	f7ff ff66 	bl	800098c <__aeabi_d2iz>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	607b      	str	r3, [r7, #4]
		voltage = (int) (((float) voltage) / 0.4025);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	ee07 3a90 	vmov	s15, r3
 8000aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ace:	ee17 0a90 	vmov	r0, s15
 8000ad2:	f7ff fcf1 	bl	80004b8 <__aeabi_f2d>
 8000ad6:	a351      	add	r3, pc, #324	@ (adr r3, 8000c1c <DAC_Write_Volt+0x19c>)
 8000ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000adc:	f7ff fe6e 	bl	80007bc <__aeabi_ddiv>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	460b      	mov	r3, r1
 8000ae4:	4610      	mov	r0, r2
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f7ff ff50 	bl	800098c <__aeabi_d2iz>
 8000aec:	4603      	mov	r3, r0
 8000aee:	607b      	str	r3, [r7, #4]

		gain = 2;
 8000af0:	2302      	movs	r3, #2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	e075      	b.n	8000be2 <DAC_Write_Volt+0x162>
	}
	else if((voltage >= 2048) & (voltage <= MAX_VOLT))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8000afc:	4293      	cmp	r3, r2
 8000afe:	bfcc      	ite	gt
 8000b00:	2301      	movgt	r3, #1
 8000b02:	2300      	movle	r3, #0
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f640 41e4 	movw	r1, #3300	@ 0xce4
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	bfd4      	ite	le
 8000b10:	2301      	movle	r3, #1
 8000b12:	2300      	movgt	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4013      	ands	r3, r2
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d033      	beq.n	8000b86 <DAC_Write_Volt+0x106>
	{
		// y = 0.402536x + 0.5793
		// Fix upper level (with gain)
		voltage = (int) (((float) voltage) - 0.5793);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	ee07 3a90 	vmov	s15, r3
 8000b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b28:	ee17 0a90 	vmov	r0, s15
 8000b2c:	f7ff fcc4 	bl	80004b8 <__aeabi_f2d>
 8000b30:	a338      	add	r3, pc, #224	@ (adr r3, 8000c14 <DAC_Write_Volt+0x194>)
 8000b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b36:	f7ff fb5f 	bl	80001f8 <__aeabi_dsub>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	4610      	mov	r0, r2
 8000b40:	4619      	mov	r1, r3
 8000b42:	f7ff ff23 	bl	800098c <__aeabi_d2iz>
 8000b46:	4603      	mov	r3, r0
 8000b48:	607b      	str	r3, [r7, #4]
		voltage = (int) (((float) voltage) / 0.4025);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	ee07 3a90 	vmov	s15, r3
 8000b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b54:	ee17 0a90 	vmov	r0, s15
 8000b58:	f7ff fcae 	bl	80004b8 <__aeabi_f2d>
 8000b5c:	a32f      	add	r3, pc, #188	@ (adr r3, 8000c1c <DAC_Write_Volt+0x19c>)
 8000b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b62:	f7ff fe2b 	bl	80007bc <__aeabi_ddiv>
 8000b66:	4602      	mov	r2, r0
 8000b68:	460b      	mov	r3, r1
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f7ff ff0d 	bl	800098c <__aeabi_d2iz>
 8000b72:	4603      	mov	r3, r0
 8000b74:	607b      	str	r3, [r7, #4]

		voltage /= 2;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	0fda      	lsrs	r2, r3, #31
 8000b7a:	4413      	add	r3, r2
 8000b7c:	105b      	asrs	r3, r3, #1
 8000b7e:	607b      	str	r3, [r7, #4]
		gain = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	e02d      	b.n	8000be2 <DAC_Write_Volt+0x162>
	}
	else
	{
		// y = 0.403318x - 1.30559
		voltage = (int) (((float) voltage) + 1.30559);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	ee07 3a90 	vmov	s15, r3
 8000b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b90:	ee17 0a90 	vmov	r0, s15
 8000b94:	f7ff fc90 	bl	80004b8 <__aeabi_f2d>
 8000b98:	a322      	add	r3, pc, #136	@ (adr r3, 8000c24 <DAC_Write_Volt+0x1a4>)
 8000b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9e:	f7ff fb2d 	bl	80001fc <__adddf3>
 8000ba2:	4602      	mov	r2, r0
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	4610      	mov	r0, r2
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f7ff feef 	bl	800098c <__aeabi_d2iz>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	607b      	str	r3, [r7, #4]
		voltage = (int) (((float) voltage) / 0.40331);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bbc:	ee17 0a90 	vmov	r0, s15
 8000bc0:	f7ff fc7a 	bl	80004b8 <__aeabi_f2d>
 8000bc4:	a319      	add	r3, pc, #100	@ (adr r3, 8000c2c <DAC_Write_Volt+0x1ac>)
 8000bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bca:	f7ff fdf7 	bl	80007bc <__aeabi_ddiv>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f7ff fed9 	bl	800098c <__aeabi_d2iz>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	607b      	str	r3, [r7, #4]

		gain = 1;
 8000bde:	2301      	movs	r3, #1
 8000be0:	60fb      	str	r3, [r7, #12]
	}

	uint16_t data = (uint16_t) ((MAX_VOLT * voltage) / MAX_DIG);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8000be8:	fb02 f303 	mul.w	r3, r2, r3
 8000bec:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <DAC_Write_Volt+0x190>)
 8000bee:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf2:	441a      	add	r2, r3
 8000bf4:	12d2      	asrs	r2, r2, #11
 8000bf6:	17db      	asrs	r3, r3, #31
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	817b      	strh	r3, [r7, #10]
	DAC_Write(data, gain);
 8000bfc:	897b      	ldrh	r3, [r7, #10]
 8000bfe:	68f9      	ldr	r1, [r7, #12]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f817 	bl	8000c34 <DAC_Write>
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	80080081 	.word	0x80080081
 8000c14:	27525461 	.word	0x27525461
 8000c18:	3fe289a0 	.word	0x3fe289a0
 8000c1c:	5c28f5c3 	.word	0x5c28f5c3
 8000c20:	3fd9c28f 	.word	0x3fd9c28f
 8000c24:	56ffc116 	.word	0x56ffc116
 8000c28:	3ff4e3b2 	.word	0x3ff4e3b2
 8000c2c:	bf0995ab 	.word	0xbf0995ab
 8000c30:	3fd9cfd4 	.word	0x3fd9cfd4

08000c34 <DAC_Write>:
 * authors  : AJ Gregory
 * version  : 0.0
 * date     : 05.14.25
 * -------------------------------------------------------------------------- */
void DAC_Write(uint16_t data, int gain)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	6039      	str	r1, [r7, #0]
 8000c3e:	80fb      	strh	r3, [r7, #6]
	uint16_t txData = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	81fb      	strh	r3, [r7, #14]
	// Build transmission packet
	if(gain == 2)
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d104      	bne.n	8000c54 <DAC_Write+0x20>
		txData = (0b0001 << 12) | data;
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c50:	81fb      	strh	r3, [r7, #14]
 8000c52:	e003      	b.n	8000c5c <DAC_Write+0x28>
	else
		txData = (0b0011 << 12) | data;
 8000c54:	88fb      	ldrh	r3, [r7, #6]
 8000c56:	f443 5340 	orr.w	r3, r3, #12288	@ 0x3000
 8000c5a:	81fb      	strh	r3, [r7, #14]

	// Wait for transmit buffer to clear
	while (!(SPI1->SR & SPI_SR_TXE));
 8000c5c:	bf00      	nop
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <DAC_Write+0x50>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d0f9      	beq.n	8000c5e <DAC_Write+0x2a>

	// Place packet in TX buffer
	SPI1->DR |= txData;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <DAC_Write+0x50>)
 8000c6c:	68da      	ldr	r2, [r3, #12]
 8000c6e:	89fb      	ldrh	r3, [r7, #14]
 8000c70:	4904      	ldr	r1, [pc, #16]	@ (8000c84 <DAC_Write+0x50>)
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60cb      	str	r3, [r1, #12]
}
 8000c76:	bf00      	nop
 8000c78:	3714      	adds	r7, #20
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40013000 	.word	0x40013000

08000c88 <DAC_Init>:
 * authors  : AJ Gregory
 * version  : 0.0
 * date     : 05.14.25
 * -------------------------------------------------------------------------- */
void DAC_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	// enable clock for GPIOA & SPI1
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);		// GPIOA: DAC NSS/SCK/SDO
 8000c8c:	4b29      	ldr	r3, [pc, #164]	@ (8000d34 <DAC_Init+0xac>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c90:	4a28      	ldr	r2, [pc, #160]	@ (8000d34 <DAC_Init+0xac>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN);		// SPI1 port
 8000c98:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <DAC_Init+0xac>)
 8000c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c9c:	4a25      	ldr	r2, [pc, #148]	@ (8000d34 <DAC_Init+0xac>)
 8000c9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ca2:	6613      	str	r3, [r2, #96]	@ 0x60

	// Clear MODER
	DAC_PORT->MODER &= ~(GPIO_MODER_MODE4 |
 8000ca4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cae:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8000cb2:	6013      	str	r3, [r2, #0]
								GPIO_MODER_MODE5 |
								GPIO_MODER_MODE7);
	// Set Pins to mode 2 (alt. func.)
	DAC_PORT->MODER |=  (GPIO_MODER_MODE4_1 |
 8000cb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cbe:	f443 430a 	orr.w	r3, r3, #35328	@ 0x8a00
 8000cc2:	6013      	str	r3, [r2, #0]
								GPIO_MODER_MODE5_1 |
								GPIO_MODER_MODE7_1);

	// Clear PUPDR
	DAC_PORT->PUPDR &= ~(GPIO_PUPDR_PUPD4 |
 8000cc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cce:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8000cd2:	60d3      	str	r3, [r2, #12]
								GPIO_PUPDR_PUPD5 |
								GPIO_PUPDR_PUPD7);

	// Clear OTYPER
	DAC_PORT->OTYPER &= ~(DAC_PINS);
 8000cd4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cde:	f023 03b0 	bic.w	r3, r3, #176	@ 0xb0
 8000ce2:	6053      	str	r3, [r2, #4]

	// Clear OSPEEDR
	DAC_PORT->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED4 |
 8000ce4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cee:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8000cf2:	6093      	str	r3, [r2, #8]
								  GPIO_OSPEEDR_OSPEED5 |
								  GPIO_OSPEEDR_OSPEED7);
	// Set each pin to high speed
	DAC_PORT->OSPEEDR |=  (GPIO_OSPEEDR_OSPEED4 |
 8000cf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cfe:	f443 434f 	orr.w	r3, r3, #52992	@ 0xcf00
 8000d02:	6093      	str	r3, [r2, #8]
								  GPIO_OSPEEDR_OSPEED5 |
								  GPIO_OSPEEDR_OSPEED7);

	// clear nibbles for bits 4, 5, 7 AFR
	DAC_PORT->AFR[0] &= ~(GPIO_AFRL_AFSEL4 |
 8000d04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d08:	6a1b      	ldr	r3, [r3, #32]
 8000d0a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000d12:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8000d16:	6213      	str	r3, [r2, #32]
								 GPIO_AFRL_AFSEL5 |
								 GPIO_AFRL_AFSEL7);
	// set bits 4, 5, 7 AF to SPI1 (fcn 5)
	DAC_PORT->AFR[0] |=  ((0x5 << GPIO_AFRL_AFSEL4_Pos) |
 8000d18:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d22:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 8000d26:	f443 03aa 	orr.w	r3, r3, #5570560	@ 0x550000
 8000d2a:	6213      	str	r3, [r2, #32]
								 (0x5 << GPIO_AFRL_AFSEL5_Pos) |
								 (0x5 << GPIO_AFRL_AFSEL7_Pos));

	// Initialize SPI for DAC
	SPI_Init();
 8000d2c:	f000 f804 	bl	8000d38 <SPI_Init>
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40021000 	.word	0x40021000

08000d38 <SPI_Init>:
 * authors  : AJ Gregory
 * version  : 0.0
 * date     : 05.14.25
 * -------------------------------------------------------------------------- */
void SPI_Init(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
	// SPI config as specified @ STM32L4 RM0351 rev.9 p.1459
	// called by or with DAC_init()
	// build control registers CR1 & CR2 for SPI control of peripheral DAC
	// assumes no active SPI xmits & no recv data in process (BSY=0)
	// CR1 (reset value = 0x0000)
	SPI1->CR1 &= ~(SPI_CR1_SPE);			// disable SPI for config
 8000d3c:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <SPI_Init+0x94>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a22      	ldr	r2, [pc, #136]	@ (8000dcc <SPI_Init+0x94>)
 8000d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d46:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(SPI_CR1_RXONLY);		// recv-only OFF
 8000d48:	4b20      	ldr	r3, [pc, #128]	@ (8000dcc <SPI_Init+0x94>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000dcc <SPI_Init+0x94>)
 8000d4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000d52:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(SPI_CR1_LSBFIRST);	// data bit order MSb:LSb
 8000d54:	4b1d      	ldr	r3, [pc, #116]	@ (8000dcc <SPI_Init+0x94>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1c      	ldr	r2, [pc, #112]	@ (8000dcc <SPI_Init+0x94>)
 8000d5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d5e:	6013      	str	r3, [r2, #0]
	SPI1->CR1 &= ~(SPI_CR1_CPOL |
 8000d60:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <SPI_Init+0x94>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a19      	ldr	r2, [pc, #100]	@ (8000dcc <SPI_Init+0x94>)
 8000d66:	f023 0303 	bic.w	r3, r3, #3
 8000d6a:	6013      	str	r3, [r2, #0]
						SPI_CR1_CPHA);			// SCLK polarity:phase = 0:0
	SPI1->CR1 |=	SPI_CR1_MSTR;			// MCU is SPI controller
 8000d6c:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <SPI_Init+0x94>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a16      	ldr	r2, [pc, #88]	@ (8000dcc <SPI_Init+0x94>)
 8000d72:	f043 0304 	orr.w	r3, r3, #4
 8000d76:	6013      	str	r3, [r2, #0]
	// CR2 (reset value = 0x0700 : 8b data)
	SPI1->CR2 &= ~(SPI_CR2_TXEIE |
 8000d78:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <SPI_Init+0x94>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	4a13      	ldr	r2, [pc, #76]	@ (8000dcc <SPI_Init+0x94>)
 8000d7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000d82:	6053      	str	r3, [r2, #4]
						SPI_CR2_RXNEIE);		// disable FIFO intrpts
	SPI1->CR2 &= ~(SPI_CR2_FRF);			// Moto frame format
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <SPI_Init+0x94>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <SPI_Init+0x94>)
 8000d8a:	f023 0310 	bic.w	r3, r3, #16
 8000d8e:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |=	SPI_CR2_NSSP;			// auto-generate NSS pulse
 8000d90:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <SPI_Init+0x94>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <SPI_Init+0x94>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |=	SPI_CR2_DS;				// 16-bit data
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <SPI_Init+0x94>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <SPI_Init+0x94>)
 8000da2:	f443 6370 	orr.w	r3, r3, #3840	@ 0xf00
 8000da6:	6053      	str	r3, [r2, #4]
	SPI1->CR2 |=	SPI_CR2_SSOE;			// enable SS output
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <SPI_Init+0x94>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <SPI_Init+0x94>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6053      	str	r3, [r2, #4]
	// CR1
	SPI1->CR1 |=	SPI_CR1_SPE;			// re-enable SPI for ops
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <SPI_Init+0x94>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a04      	ldr	r2, [pc, #16]	@ (8000dcc <SPI_Init+0x94>)
 8000dba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40013000 	.word	0x40013000

08000dd0 <ADC1_2_IRQHandler>:
  __enable_irq();                            // enable global interrupts
  // configure GPIO pin PA0 
RCC->AHB2ENR  |= (RCC_AHB2ENR_GPIOAEN);    // connect clock to GPIOA
GPIOA->MODER  |= (GPIO_MODER_MODE0);       // analog mode for PA0 (set MODER last)
}
void ADC1_2_IRQHandler( void ) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  if (ADC1->ISR & ADC_ISR_EOC) {      // triggered by EOC event ...
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e08 <ADC1_2_IRQHandler+0x38>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00d      	beq.n	8000dfc <ADC1_2_IRQHandler+0x2c>
    ADC1->ISR &= ~(ADC_ISR_EOC);     // manage the flag
 8000de0:	4b09      	ldr	r3, [pc, #36]	@ (8000e08 <ADC1_2_IRQHandler+0x38>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a08      	ldr	r2, [pc, #32]	@ (8000e08 <ADC1_2_IRQHandler+0x38>)
 8000de6:	f023 0304 	bic.w	r3, r3, #4
 8000dea:	6013      	str	r3, [r2, #0]
    interruptFlag = TRUE; // set  
 8000dec:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <ADC1_2_IRQHandler+0x3c>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
    conversionResult = ADC1->DR; // copy result to global var
 8000df2:	4b05      	ldr	r3, [pc, #20]	@ (8000e08 <ADC1_2_IRQHandler+0x38>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	461a      	mov	r2, r3
 8000df8:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <ADC1_2_IRQHandler+0x40>)
 8000dfa:	601a      	str	r2, [r3, #0]
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	50040000 	.word	0x50040000
 8000e0c:	2000007c 	.word	0x2000007c
 8000e10:	20000078 	.word	0x20000078

08000e14 <computeBiquad>:
#include "filter_util.h"

void computeBiquad(biquad_t *biq, float input, float *output) {
 8000e14:	b480      	push	{r7}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e20:	6079      	str	r1, [r7, #4]
  int acc = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]

  //direct form 1 difference equation
  acc += input*biq->b[0];
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	edd3 6a00 	vldr	s13, [r3]
 8000e38:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e48:	ee17 3a90 	vmov	r3, s15
 8000e4c:	617b      	str	r3, [r7, #20]
  acc += biq->Xn1*biq->b[1];
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	ee07 3a90 	vmov	s15, r3
 8000e54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	ee07 3a90 	vmov	s15, r3
 8000e60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e7a:	ee17 3a90 	vmov	r3, s15
 8000e7e:	617b      	str	r3, [r7, #20]
  acc += biq->Xn2*biq->b[2];
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	ee07 3a90 	vmov	s15, r3
 8000e92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	edd3 7a00 	vldr	s15, [r3]
 8000ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eac:	ee17 3a90 	vmov	r3, s15
 8000eb0:	617b      	str	r3, [r7, #20]

  acc -= biq->Yn1*biq->a[1];
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	edd3 7a00 	vldr	s15, [r3]
 8000ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ede:	ee17 3a90 	vmov	r3, s15
 8000ee2:	617b      	str	r3, [r7, #20]
  acc -= biq->Yn2*biq->a[2];
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	ee07 3a90 	vmov	s15, r3
 8000ef6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	3308      	adds	r3, #8
 8000f00:	edd3 7a00 	vldr	s15, [r3]
 8000f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f10:	ee17 3a90 	vmov	r3, s15
 8000f14:	617b      	str	r3, [r7, #20]

  //update past inputs
  biq->Xn2 = biq->Xn1;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	60da      	str	r2, [r3, #12]
  biq->Xn1 = input;
 8000f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f26:	ee17 2a90 	vmov	r2, s15
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	609a      	str	r2, [r3, #8]

  //update past outputs
  biq->Yn2 = biq->Yn1;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	691a      	ldr	r2, [r3, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	615a      	str	r2, [r3, #20]
  biq->Yn1 = acc;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	611a      	str	r2, [r3, #16]

  //output sample
  *output = acc;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	ee07 3a90 	vmov	s15, r3
 8000f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	edc3 7a00 	vstr	s15, [r3]
}
 8000f4c:	bf00      	nop
 8000f4e:	371c      	adds	r7, #28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <LPF>:
 * Low Pass Filter:
 * H(s) = 1 / (s^2 + s/Q + 1)
 */
// pCoeffs: {b0, b1, b2, a1, a2}
void LPF(biquad_t* biq_stage1, float bandwidth, float corner_freq)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f64:	edc7 0a01 	vstr	s1, [r7, #4]
	float w0 = omega(corner_freq);
 8000f68:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f6c:	f000 f884 	bl	8001078 <omega>
 8000f70:	ed87 0a05 	vstr	s0, [r7, #20]
	float a = alpha_bw(corner_freq, bandwidth);
 8000f74:	edd7 0a02 	vldr	s1, [r7, #8]
 8000f78:	ed97 0a01 	vldr	s0, [r7, #4]
 8000f7c:	f000 f8a8 	bl	80010d0 <alpha_bw>
 8000f80:	ed87 0a04 	vstr	s0, [r7, #16]

	biq_stage1->b[0] = ((1 - cosf(w0))/2)/(1 + a);
 8000f84:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f88:	f001 fc74 	bl	8002874 <cosf>
 8000f8c:	eef0 7a40 	vmov.f32	s15, s0
 8000f90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f98:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000f9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fa4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fa8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fb4:	edc3 7a00 	vstr	s15, [r3]
	biq_stage1->b[1] = (1 - cosf(w0))/(1 + a);
 8000fb8:	ed97 0a05 	vldr	s0, [r7, #20]
 8000fbc:	f001 fc5a 	bl	8002874 <cosf>
 8000fc0:	eef0 7a40 	vmov.f32	s15, s0
 8000fc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fc8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000fcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fe2:	edc3 7a00 	vstr	s15, [r3]
	biq_stage1->b[2] = ((1 - cosf(w0))/2)/(1 + a);
 8000fe6:	ed97 0a05 	vldr	s0, [r7, #20]
 8000fea:	f001 fc43 	bl	8002874 <cosf>
 8000fee:	eef0 7a40 	vmov.f32	s15, s0
 8000ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ffa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000ffe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001002:	edd7 7a04 	vldr	s15, [r7, #16]
 8001006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800100a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	3308      	adds	r3, #8
 8001014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001018:	edc3 7a00 	vstr	s15, [r3]
	biq_stage1->a[0] = (-2 * cosf(w0))/(1 + a);
 800101c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001020:	f001 fc28 	bl	8002874 <cosf>
 8001024:	eef0 7a40 	vmov.f32	s15, s0
 8001028:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800102c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001030:	edd7 7a04 	vldr	s15, [r7, #16]
 8001034:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001044:	edc3 7a00 	vstr	s15, [r3]
	biq_stage1->a[1] = (1 - a)/(1 + a);
 8001048:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800104c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001050:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001054:	edd7 7a04 	vldr	s15, [r7, #16]
 8001058:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800105c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3304      	adds	r3, #4
 8001066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800106a:	edc3 7a00 	vstr	s15, [r3]
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <omega>:
	biq_stage1->a[0] = (-2 * cos(w0))/(1 + a);
	biq_stage1->a[1] = (1 - a)/(1 + a);

}

float omega( float center_freq ) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	ed87 0a01 	vstr	s0, [r7, #4]
	return (2*PI*center_freq/SAMPLES);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff fa18 	bl	80004b8 <__aeabi_f2d>
 8001088:	a30e      	add	r3, pc, #56	@ (adr r3, 80010c4 <omega+0x4c>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fa6b 	bl	8000568 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <omega+0x48>)
 80010a0:	f7ff fb8c 	bl	80007bc <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fc96 	bl	80009dc <__aeabi_d2f>
 80010b0:	4603      	mov	r3, r0
 80010b2:	ee07 3a90 	vmov	s15, r3
}
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40700000 	.word	0x40700000
 80010c4:	54411744 	.word	0x54411744
 80010c8:	401921fb 	.word	0x401921fb
 80010cc:	00000000 	.word	0x00000000

080010d0 <alpha_bw>:

float alpha_bw( float center_freq, float bandwidth ) {
 80010d0:	b5b0      	push	{r4, r5, r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80010da:	edc7 0a00 	vstr	s1, [r7]
	float omega_value = omega(center_freq);
 80010de:	ed97 0a01 	vldr	s0, [r7, #4]
 80010e2:	f7ff ffc9 	bl	8001078 <omega>
 80010e6:	ed87 0a05 	vstr	s0, [r7, #20]
	float sin_omega = sinf(omega_value);
 80010ea:	ed97 0a05 	vldr	s0, [r7, #20]
 80010ee:	f001 fc05 	bl	80028fc <sinf>
 80010f2:	ed87 0a04 	vstr	s0, [r7, #16]
	float inside_sinh = 0.1505*bandwidth*omega_value/sin_omega;
 80010f6:	6838      	ldr	r0, [r7, #0]
 80010f8:	f7ff f9de 	bl	80004b8 <__aeabi_f2d>
 80010fc:	a31a      	add	r3, pc, #104	@ (adr r3, 8001168 <alpha_bw+0x98>)
 80010fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001102:	f7ff fa31 	bl	8000568 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4614      	mov	r4, r2
 800110c:	461d      	mov	r5, r3
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff f9d2 	bl	80004b8 <__aeabi_f2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4620      	mov	r0, r4
 800111a:	4629      	mov	r1, r5
 800111c:	f7ff fa24 	bl	8000568 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4614      	mov	r4, r2
 8001126:	461d      	mov	r5, r3
 8001128:	6938      	ldr	r0, [r7, #16]
 800112a:	f7ff f9c5 	bl	80004b8 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4620      	mov	r0, r4
 8001134:	4629      	mov	r1, r5
 8001136:	f7ff fb41 	bl	80007bc <__aeabi_ddiv>
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	f7ff fc4b 	bl	80009dc <__aeabi_d2f>
 8001146:	4603      	mov	r3, r0
 8001148:	60fb      	str	r3, [r7, #12]
	return sin_omega*sinhf(inside_sinh);
 800114a:	ed97 0a03 	vldr	s0, [r7, #12]
 800114e:	f001 fb67 	bl	8002820 <sinhf>
 8001152:	eeb0 7a40 	vmov.f32	s14, s0
 8001156:	edd7 7a04 	vldr	s15, [r7, #16]
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	3718      	adds	r7, #24
 8001164:	46bd      	mov	sp, r7
 8001166:	bdb0      	pop	{r4, r5, r7, pc}
 8001168:	810624dd 	.word	0x810624dd
 800116c:	3fc34395 	.word	0x3fc34395

08001170 <main>:
#include "stdlib.h"
void SystemClock_Config(void);
biquad_t biq_stage1;
static float output_val = 0.0;
int main(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 8001176:	af00      	add	r7, sp, #0
  HAL_Init();
 8001178:	f000 fa93 	bl	80016a2 <HAL_Init>
  SystemClock_Config();
 800117c:	f000 f90c 	bl	8001398 <SystemClock_Config>
  DAC_Init();
 8001180:	f7ff fd82 	bl	8000c88 <DAC_Init>
  GPIO_init_pins();
 8001184:	f000 f8c8 	bl	8001318 <GPIO_init_pins>
  biq_stage1.a = (float*)malloc(2*sizeof(float));
 8001188:	2008      	movs	r0, #8
 800118a:	f001 fa4f 	bl	800262c <malloc>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4b5d      	ldr	r3, [pc, #372]	@ (8001308 <main+0x198>)
 8001194:	601a      	str	r2, [r3, #0]
  biq_stage1.b = (float*)malloc(3*sizeof(float));
 8001196:	200c      	movs	r0, #12
 8001198:	f001 fa48 	bl	800262c <malloc>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	4b59      	ldr	r3, [pc, #356]	@ (8001308 <main+0x198>)
 80011a2:	605a      	str	r2, [r3, #4]
  biq_stage1.Xn1 = 0;
 80011a4:	4b58      	ldr	r3, [pc, #352]	@ (8001308 <main+0x198>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  biq_stage1.Xn2 = 0;
 80011aa:	4b57      	ldr	r3, [pc, #348]	@ (8001308 <main+0x198>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	60da      	str	r2, [r3, #12]
  biq_stage1.Yn1 = 0;
 80011b0:	4b55      	ldr	r3, [pc, #340]	@ (8001308 <main+0x198>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  biq_stage1.Yn2 = 0;
 80011b6:	4b54      	ldr	r3, [pc, #336]	@ (8001308 <main+0x198>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	615a      	str	r2, [r3, #20]
  Timer_setup_TIM2(SAMPLE_INTVL);
 80011bc:	f240 601a 	movw	r0, #1562	@ 0x61a
 80011c0:	f000 f9d2 	bl	8001568 <Timer_setup_TIM2>
  int X[SAMPLES] = {0};
 80011c4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80011c8:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80011cc:	4618      	mov	r0, r3
 80011ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011d2:	461a      	mov	r2, r3
 80011d4:	2100      	movs	r1, #0
 80011d6:	f001 fadf 	bl	8002798 <memset>
  int j = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
  for (int i = 0; i < SAMPLES; i++) {
 80011e0:	2300      	movs	r3, #0
 80011e2:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
 80011e6:	e03e      	b.n	8001266 <main+0xf6>
	  X[i] = 1500*sinf(2*PI*i/SAMPLES)+1500;
 80011e8:	f8d7 0408 	ldr.w	r0, [r7, #1032]	@ 0x408
 80011ec:	f7ff f952 	bl	8000494 <__aeabi_i2d>
 80011f0:	a343      	add	r3, pc, #268	@ (adr r3, 8001300 <main+0x190>)
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	f7ff f9b7 	bl	8000568 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f04f 0200 	mov.w	r2, #0
 8001206:	4b41      	ldr	r3, [pc, #260]	@ (800130c <main+0x19c>)
 8001208:	f7ff fad8 	bl	80007bc <__aeabi_ddiv>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fbe2 	bl	80009dc <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	ee00 3a10 	vmov	s0, r3
 800121e:	f001 fb6d 	bl	80028fc <sinf>
 8001222:	eef0 7a40 	vmov.f32	s15, s0
 8001226:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001310 <main+0x1a0>
 800122a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001310 <main+0x1a0>
 8001232:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123a:	ee17 1a90 	vmov	r1, s15
 800123e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001242:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8001246:	f8d7 2408 	ldr.w	r2, [r7, #1032]	@ 0x408
 800124a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
//	  }
//	  else {
//		  X[i] = 1000;
//	  }
//	  j++;
	  if (j > 12) {
 800124e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001252:	2b0c      	cmp	r3, #12
 8001254:	dd02      	ble.n	800125c <main+0xec>
		  j=0;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
  for (int i = 0; i < SAMPLES; i++) {
 800125c:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 8001260:	3301      	adds	r3, #1
 8001262:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
 8001266:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 800126a:	2bff      	cmp	r3, #255	@ 0xff
 800126c:	ddbc      	ble.n	80011e8 <main+0x78>
	  }
  }
  int i = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
  TIM2->CR1 |= TIM_CR1_CEN; // start timer
 8001274:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6013      	str	r3, [r2, #0]
  LPF(&biq_stage1, 20, 15); // load LPF
 8001284:	eef2 0a0e 	vmov.f32	s1, #46	@ 0x41700000  15.0
 8001288:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 800128c:	481e      	ldr	r0, [pc, #120]	@ (8001308 <main+0x198>)
 800128e:	f7ff fe63 	bl	8000f58 <LPF>
  while (1)
  {
	  if (checkTimerFlag()) {
 8001292:	f000 f9c9 	bl	8001628 <checkTimerFlag>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d029      	beq.n	80012f0 <main+0x180>
		  TIM2->CCR1+=(SAMPLE_INTVL);
 800129c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a6:	f203 631a 	addw	r3, r3, #1562	@ 0x61a
 80012aa:	6353      	str	r3, [r2, #52]	@ 0x34
		  computeBiquad(&biq_stage1, (float)(X[i]), &output_val);
 80012ac:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80012b0:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80012b4:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c4:	4913      	ldr	r1, [pc, #76]	@ (8001314 <main+0x1a4>)
 80012c6:	eeb0 0a67 	vmov.f32	s0, s15
 80012ca:	480f      	ldr	r0, [pc, #60]	@ (8001308 <main+0x198>)
 80012cc:	f7ff fda2 	bl	8000e14 <computeBiquad>
		  DAC_Write_Volt((int)X[i]);
 80012d0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80012d4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 80012d8:	f8d7 2404 	ldr.w	r2, [r7, #1028]	@ 0x404
 80012dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fbcd 	bl	8000a80 <DAC_Write_Volt>

		  i++;
 80012e6:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80012ea:	3301      	adds	r3, #1
 80012ec:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
	  }
	  if(i>=SAMPLES) {
 80012f0:	f8d7 3404 	ldr.w	r3, [r7, #1028]	@ 0x404
 80012f4:	2bff      	cmp	r3, #255	@ 0xff
 80012f6:	ddcc      	ble.n	8001292 <main+0x122>
		  i=0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
	  if (checkTimerFlag()) {
 80012fe:	e7c8      	b.n	8001292 <main+0x122>
 8001300:	54411744 	.word	0x54411744
 8001304:	401921fb 	.word	0x401921fb
 8001308:	20000080 	.word	0x20000080
 800130c:	40700000 	.word	0x40700000
 8001310:	44bb8000 	.word	0x44bb8000
 8001314:	20000098 	.word	0x20000098

08001318 <GPIO_init_pins>:
	  }
  }
}

void GPIO_init_pins( void ) {
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOFEN; // enable clock for GPIOF=POTS_PORT
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <GPIO_init_pins+0x70>)
 800131e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001320:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <GPIO_init_pins+0x70>)
 8001322:	f043 0320 	orr.w	r3, r3, #32
 8001326:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN; // enable clock for GPIOC=AUDIO_PORT
 8001328:	4b17      	ldr	r3, [pc, #92]	@ (8001388 <GPIO_init_pins+0x70>)
 800132a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132c:	4a16      	ldr	r2, [pc, #88]	@ (8001388 <GPIO_init_pins+0x70>)
 800132e:	f043 0304 	orr.w	r3, r3, #4
 8001332:	64d3      	str	r3, [r2, #76]	@ 0x4c
	POTS_PORT->MODER |= POTS_ANALOG_MODER; // put in analog mode
 8001334:	4b15      	ldr	r3, [pc, #84]	@ (800138c <GPIO_init_pins+0x74>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4914      	ldr	r1, [pc, #80]	@ (800138c <GPIO_init_pins+0x74>)
 800133a:	4b15      	ldr	r3, [pc, #84]	@ (8001390 <GPIO_init_pins+0x78>)
 800133c:	4313      	orrs	r3, r2
 800133e:	600b      	str	r3, [r1, #0]
	AUDIO_PORT->MODER |= AUDIO_ANALOG_MODER; // put in analog mode
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <GPIO_init_pins+0x7c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a13      	ldr	r2, [pc, #76]	@ (8001394 <GPIO_init_pins+0x7c>)
 8001346:	f443 5370 	orr.w	r3, r3, #15360	@ 0x3c00
 800134a:	6013      	str	r3, [r2, #0]
	AUDIO_PORT->MODER &= ~AUDIO_DIGITAL_MODER; // put in digital input mode
 800134c:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <GPIO_init_pins+0x7c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a10      	ldr	r2, [pc, #64]	@ (8001394 <GPIO_init_pins+0x7c>)
 8001352:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001356:	6013      	str	r3, [r2, #0]
	AUDIO_PORT->OTYPER  &= ~AUDIO_DIGITAL_OTYPER; // put in digital output mode
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <GPIO_init_pins+0x7c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <GPIO_init_pins+0x7c>)
 800135e:	f023 0307 	bic.w	r3, r3, #7
 8001362:	6053      	str	r3, [r2, #4]
	AUDIO_PORT->PUPDR  &= ~AUDIO_DIGITAL_PUPDR; // put in digital output mode
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <GPIO_init_pins+0x7c>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <GPIO_init_pins+0x7c>)
 800136a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800136e:	60d3      	str	r3, [r2, #12]
	AUDIO_PORT->OSPEEDR |= AUDIO_DIGITAL_OSPEEDR; // put in digital output mode
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <GPIO_init_pins+0x7c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4a07      	ldr	r2, [pc, #28]	@ (8001394 <GPIO_init_pins+0x7c>)
 8001376:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800137a:	6093      	str	r3, [r2, #8]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	48001400 	.word	0x48001400
 8001390:	f03fffc0 	.word	0xf03fffc0
 8001394:	48000800 	.word	0x48000800

08001398 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b096      	sub	sp, #88	@ 0x58
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	2244      	movs	r2, #68	@ 0x44
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 f9f6 	bl	8002798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	463b      	mov	r3, r7
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013ba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013be:	f000 fad9 	bl	8001974 <HAL_PWREx_ControlVoltageScaling>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013c8:	f000 f82c 	bl	8001424 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013cc:	2310      	movs	r3, #16
 80013ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013d8:	2360      	movs	r3, #96	@ 0x60
 80013da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013dc:	2300      	movs	r3, #0
 80013de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fb1b 	bl	8001a20 <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80013f0:	f000 f818 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f000 ff21 	bl	8002254 <HAL_RCC_ClockConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001418:	f000 f804 	bl	8001424 <Error_Handler>
  }
}
 800141c:	bf00      	nop
 800141e:	3758      	adds	r7, #88	@ 0x58
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <Error_Handler+0x8>

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_MspInit+0x44>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143a:	4a0e      	ldr	r2, [pc, #56]	@ (8001474 <HAL_MspInit+0x44>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6613      	str	r3, [r2, #96]	@ 0x60
 8001442:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_MspInit+0x44>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	@ (8001474 <HAL_MspInit+0x44>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001452:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <HAL_MspInit+0x44>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001458:	6593      	str	r3, [r2, #88]	@ 0x58
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <HAL_MspInit+0x44>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <NMI_Handler+0x4>

08001480 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <MemManage_Handler+0x4>

08001490 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <UsageFault_Handler+0x4>

080014a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ce:	f000 f93d 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	@ (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f001 f95e 	bl	80027c8 <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	@ (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	@ (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20050000 	.word	0x20050000
 8001538:	00000400 	.word	0x00000400
 800153c:	2000009c 	.word	0x2000009c
 8001540:	200001f0 	.word	0x200001f0

08001544 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	@ (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <Timer_setup_TIM2>:
#include "main.h"
#include "filter_util.h"

static uint8_t  interruptTimerFlag = FALSE;

void Timer_setup_TIM2( int iDutyCycle ) {
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
   RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;           // enable clock for TIM2
 8001570:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <Timer_setup_TIM2+0x64>)
 8001572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001574:	4a15      	ldr	r2, [pc, #84]	@ (80015cc <Timer_setup_TIM2+0x64>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6593      	str	r3, [r2, #88]	@ 0x58
   TIM2->DIER |= (TIM_DIER_CC1IE | TIM_DIER_UIE);  // enable event gen, rcv CCR1
 800157c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001586:	f043 0303 	orr.w	r3, r3, #3
 800158a:	60d3      	str	r3, [r2, #12]
   TIM2->ARR = PERIOD;                             // ARR = T = counts @4MHz
 800158c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001590:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001594:	62da      	str	r2, [r3, #44]	@ 0x2c
   TIM2->CCR1 = iDutyCycle;                        // ticks for duty cycle
 8001596:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6353      	str	r3, [r2, #52]	@ 0x34
   TIM2->SR &= ~(TIM_SR_CC1IF | TIM_SR_UIF);       // clr IRQ flag in status reg
 800159e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015a8:	f023 0303 	bic.w	r3, r3, #3
 80015ac:	6113      	str	r3, [r2, #16]
   NVIC->ISER[0] |= (1 << (TIM2_IRQn & 0x1F));     // set NVIC interrupt: 0x1F
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <Timer_setup_TIM2+0x68>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <Timer_setup_TIM2+0x68>)
 80015b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ba:	b662      	cpsie	i
}
 80015bc:	bf00      	nop
   __enable_irq();                                 // global IRQ enable
}
 80015be:	bf00      	nop
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
   if (TIM2->SR & TIM_SR_CC1IF) {      // triggered by CCR1 event ...
 80015d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00a      	beq.n	80015fc <TIM2_IRQHandler+0x28>
      TIM2->SR &= ~(TIM_SR_CC1IF);     // manage the flag
 80015e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015f0:	f023 0302 	bic.w	r3, r3, #2
 80015f4:	6113      	str	r3, [r2, #16]
      interruptTimerFlag = TRUE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001624 <TIM2_IRQHandler+0x50>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
	 }
   if (TIM2->SR & TIM_SR_UIF) {        // triggered by ARR event ...
 80015fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d007      	beq.n	800161a <TIM2_IRQHandler+0x46>
      TIM2->SR &= ~(TIM_SR_UIF);       // manage the flag
 800160a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6113      	str	r3, [r2, #16]
   }
}
 800161a:	bf00      	nop
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	200000a0 	.word	0x200000a0

08001628 <checkTimerFlag>:

uint8_t checkTimerFlag( void ) {
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  if (interruptTimerFlag == TRUE) {
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <checkTimerFlag+0x24>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d104      	bne.n	800163e <checkTimerFlag+0x16>
	  interruptTimerFlag = FALSE; // flag has been used, set to false
 8001634:	4b05      	ldr	r3, [pc, #20]	@ (800164c <checkTimerFlag+0x24>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
    return TRUE; // an interrupt has been received
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <checkTimerFlag+0x18>
  }
  else {
    return FALSE;
 800163e:	2300      	movs	r3, #0
  }
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200000a0 	.word	0x200000a0

08001650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001650:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001688 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001654:	f7ff ff76 	bl	8001544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	@ (800168c <LoopForever+0x6>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	@ (8001690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <LoopForever+0xe>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	@ (800169c <LoopForever+0x16>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f001 f8a9 	bl	80027d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001682:	f7ff fd75 	bl	8001170 <main>

08001686 <LoopForever>:

LoopForever:
    b LoopForever
 8001686:	e7fe      	b.n	8001686 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001688:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001694:	08003cc8 	.word	0x08003cc8
  ldr r2, =_sbss
 8001698:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800169c:	200001f0 	.word	0x200001f0

080016a0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC3_IRQHandler>

080016a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ac:	2003      	movs	r0, #3
 80016ae:	f000 f91f 	bl	80018f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b2:	200f      	movs	r0, #15
 80016b4:	f000 f80e 	bl	80016d4 <HAL_InitTick>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	e001      	b.n	80016c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c4:	f7ff feb4 	bl	8001430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016c8:	79fb      	ldrb	r3, [r7, #7]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016e0:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <HAL_InitTick+0x6c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d023      	beq.n	8001730 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016e8:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <HAL_InitTick+0x70>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <HAL_InitTick+0x6c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f91d 	bl	800193e <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10f      	bne.n	800172a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d809      	bhi.n	8001724 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001718:	f000 f8f5 	bl	8001906 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800171c:	4a0a      	ldr	r2, [pc, #40]	@ (8001748 <HAL_InitTick+0x74>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	e007      	b.n	8001734 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e004      	b.n	8001734 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	e001      	b.n	8001734 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	20000000 	.word	0x20000000
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	200000a4 	.word	0x200000a4

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200000a4 	.word	0x200000a4

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	@ (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	2b00      	cmp	r3, #0
 8001802:	db0a      	blt.n	800181a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	b2da      	uxtb	r2, r3
 8001808:	490c      	ldr	r1, [pc, #48]	@ (800183c <__NVIC_SetPriority+0x4c>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	0112      	lsls	r2, r2, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	440b      	add	r3, r1
 8001814:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001818:	e00a      	b.n	8001830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4908      	ldr	r1, [pc, #32]	@ (8001840 <__NVIC_SetPriority+0x50>)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	3b04      	subs	r3, #4
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	440b      	add	r3, r1
 800182e:	761a      	strb	r2, [r3, #24]
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000e100 	.word	0xe000e100
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001844:	b480      	push	{r7}
 8001846:	b089      	sub	sp, #36	@ 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f1c3 0307 	rsb	r3, r3, #7
 800185e:	2b04      	cmp	r3, #4
 8001860:	bf28      	it	cs
 8001862:	2304      	movcs	r3, #4
 8001864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3304      	adds	r3, #4
 800186a:	2b06      	cmp	r3, #6
 800186c:	d902      	bls.n	8001874 <NVIC_EncodePriority+0x30>
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	3b03      	subs	r3, #3
 8001872:	e000      	b.n	8001876 <NVIC_EncodePriority+0x32>
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	43da      	mvns	r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800188c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa01 f303 	lsl.w	r3, r1, r3
 8001896:	43d9      	mvns	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	4313      	orrs	r3, r2
         );
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3724      	adds	r7, #36	@ 0x24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
	...

080018ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3b01      	subs	r3, #1
 80018b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018bc:	d301      	bcc.n	80018c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018be:	2301      	movs	r3, #1
 80018c0:	e00f      	b.n	80018e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <SysTick_Config+0x40>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ca:	210f      	movs	r1, #15
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018d0:	f7ff ff8e 	bl	80017f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018d4:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <SysTick_Config+0x40>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018da:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <SysTick_Config+0x40>)
 80018dc:	2207      	movs	r2, #7
 80018de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	e000e010 	.word	0xe000e010

080018f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff ff47 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	4603      	mov	r3, r0
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001918:	f7ff ff5c 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 800191c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6978      	ldr	r0, [r7, #20]
 8001924:	f7ff ff8e 	bl	8001844 <NVIC_EncodePriority>
 8001928:	4602      	mov	r2, r0
 800192a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff5d 	bl	80017f0 <__NVIC_SetPriority>
}
 8001936:	bf00      	nop
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffb0 	bl	80018ac <SysTick_Config>
 800194c:	4603      	mov	r3, r0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <HAL_PWREx_GetVoltageRange+0x18>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40007000 	.word	0x40007000

08001974 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001982:	d130      	bne.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001984:	4b23      	ldr	r3, [pc, #140]	@ (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800198c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001990:	d038      	beq.n	8001a04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001992:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800199a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2232      	movs	r2, #50	@ 0x32
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0c9b      	lsrs	r3, r3, #18
 80019b4:	3301      	adds	r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019b8:	e002      	b.n	80019c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3b01      	subs	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c0:	4b14      	ldr	r3, [pc, #80]	@ (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019cc:	d102      	bne.n	80019d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f2      	bne.n	80019ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e0:	d110      	bne.n	8001a04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e00f      	b.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019f2:	d007      	beq.n	8001a04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019f4:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019fc:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40007000 	.word	0x40007000
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	431bde83 	.word	0x431bde83

08001a20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d102      	bne.n	8001a34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	f000 bc08 	b.w	8002244 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a34:	4b96      	ldr	r3, [pc, #600]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a3e:	4b94      	ldr	r3, [pc, #592]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0310 	and.w	r3, r3, #16
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80e4 	beq.w	8001c1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <HAL_RCC_OscConfig+0x4c>
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	f040 808b 	bne.w	8001b7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	f040 8087 	bne.w	8001b7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a6c:	4b88      	ldr	r3, [pc, #544]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_RCC_OscConfig+0x64>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e3df      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a1a      	ldr	r2, [r3, #32]
 8001a88:	4b81      	ldr	r3, [pc, #516]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d004      	beq.n	8001a9e <HAL_RCC_OscConfig+0x7e>
 8001a94:	4b7e      	ldr	r3, [pc, #504]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a9c:	e005      	b.n	8001aaa <HAL_RCC_OscConfig+0x8a>
 8001a9e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa4:	091b      	lsrs	r3, r3, #4
 8001aa6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d223      	bcs.n	8001af6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fd5a 	bl	800256c <RCC_SetFlashLatencyFromMSIRange>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e3c0      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac2:	4b73      	ldr	r3, [pc, #460]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a72      	ldr	r2, [pc, #456]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	f043 0308 	orr.w	r3, r3, #8
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b70      	ldr	r3, [pc, #448]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1b      	ldr	r3, [r3, #32]
 8001ada:	496d      	ldr	r1, [pc, #436]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae0:	4b6b      	ldr	r3, [pc, #428]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	4968      	ldr	r1, [pc, #416]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
 8001af4:	e025      	b.n	8001b42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af6:	4b66      	ldr	r3, [pc, #408]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a65      	ldr	r2, [pc, #404]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b63      	ldr	r3, [pc, #396]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4960      	ldr	r1, [pc, #384]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b14:	4b5e      	ldr	r3, [pc, #376]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	495b      	ldr	r1, [pc, #364]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 fd1a 	bl	800256c <RCC_SetFlashLatencyFromMSIRange>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e380      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b42:	f000 fc87 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8001b46:	4602      	mov	r2, r0
 8001b48:	4b51      	ldr	r3, [pc, #324]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	4950      	ldr	r1, [pc, #320]	@ (8001c94 <HAL_RCC_OscConfig+0x274>)
 8001b54:	5ccb      	ldrb	r3, [r1, r3]
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8001c98 <HAL_RCC_OscConfig+0x278>)
 8001b60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b62:	4b4e      	ldr	r3, [pc, #312]	@ (8001c9c <HAL_RCC_OscConfig+0x27c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fdb4 	bl	80016d4 <HAL_InitTick>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d052      	beq.n	8001c1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	e364      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	699b      	ldr	r3, [r3, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d032      	beq.n	8001be8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b82:	4b43      	ldr	r3, [pc, #268]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a42      	ldr	r2, [pc, #264]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b8e:	f7ff fdf1 	bl	8001774 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b96:	f7ff fded 	bl	8001774 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e34d      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ba8:	4b39      	ldr	r3, [pc, #228]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0302 	and.w	r3, r3, #2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb4:	4b36      	ldr	r3, [pc, #216]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a35      	ldr	r2, [pc, #212]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bba:	f043 0308 	orr.w	r3, r3, #8
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b33      	ldr	r3, [pc, #204]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	4930      	ldr	r1, [pc, #192]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	021b      	lsls	r3, r3, #8
 8001be0:	492b      	ldr	r1, [pc, #172]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	604b      	str	r3, [r1, #4]
 8001be6:	e01a      	b.n	8001c1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001be8:	4b29      	ldr	r3, [pc, #164]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a28      	ldr	r2, [pc, #160]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fdbe 	bl	8001774 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fdba 	bl	8001774 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e31a      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c0e:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1f0      	bne.n	8001bfc <HAL_RCC_OscConfig+0x1dc>
 8001c1a:	e000      	b.n	8001c1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d073      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_OscConfig+0x21c>
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	d10e      	bne.n	8001c54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d10b      	bne.n	8001c54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d063      	beq.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d15f      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e2f7      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c5c:	d106      	bne.n	8001c6c <HAL_RCC_OscConfig+0x24c>
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a0b      	ldr	r2, [pc, #44]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e025      	b.n	8001cb8 <HAL_RCC_OscConfig+0x298>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c74:	d114      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x280>
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a02      	ldr	r2, [pc, #8]	@ (8001c90 <HAL_RCC_OscConfig+0x270>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e013      	b.n	8001cb8 <HAL_RCC_OscConfig+0x298>
 8001c90:	40021000 	.word	0x40021000
 8001c94:	08003898 	.word	0x08003898
 8001c98:	20000000 	.word	0x20000000
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	4ba0      	ldr	r3, [pc, #640]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a9f      	ldr	r2, [pc, #636]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	4b9d      	ldr	r3, [pc, #628]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a9c      	ldr	r2, [pc, #624]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fd58 	bl	8001774 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fd54 	bl	8001774 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	@ 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e2b4      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cda:	4b92      	ldr	r3, [pc, #584]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x2a8>
 8001ce6:	e014      	b.n	8001d12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fd44 	bl	8001774 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fd40 	bl	8001774 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	@ 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e2a0      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	4b88      	ldr	r3, [pc, #544]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2d0>
 8001d0e:	e000      	b.n	8001d12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d060      	beq.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_OscConfig+0x310>
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d119      	bne.n	8001d5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d116      	bne.n	8001d5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d30:	4b7c      	ldr	r3, [pc, #496]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <HAL_RCC_OscConfig+0x328>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e27d      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d48:	4b76      	ldr	r3, [pc, #472]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	4973      	ldr	r1, [pc, #460]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d5c:	e040      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d023      	beq.n	8001dae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d66:	4b6f      	ldr	r3, [pc, #444]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff fcff 	bl	8001774 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7ff fcfb 	bl	8001774 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e25b      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d8c:	4b65      	ldr	r3, [pc, #404]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b62      	ldr	r3, [pc, #392]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	061b      	lsls	r3, r3, #24
 8001da6:	495f      	ldr	r1, [pc, #380]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
 8001dac:	e018      	b.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dae:	4b5d      	ldr	r3, [pc, #372]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dba:	f7ff fcdb 	bl	8001774 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fcd7 	bl	8001774 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e237      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd4:	4b53      	ldr	r3, [pc, #332]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d03c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d01c      	beq.n	8001e2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df4:	4b4b      	ldr	r3, [pc, #300]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dfa:	4a4a      	ldr	r2, [pc, #296]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff fcb6 	bl	8001774 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fcb2 	bl	8001774 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e212      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1e:	4b41      	ldr	r3, [pc, #260]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0ef      	beq.n	8001e0c <HAL_RCC_OscConfig+0x3ec>
 8001e2c:	e01b      	b.n	8001e66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e34:	4a3b      	ldr	r2, [pc, #236]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fc99 	bl	8001774 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e46:	f7ff fc95 	bl	8001774 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e1f5      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e58:	4b32      	ldr	r3, [pc, #200]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1ef      	bne.n	8001e46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 80a6 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e74:	2300      	movs	r3, #0
 8001e76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e78:	4b2a      	ldr	r3, [pc, #168]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10d      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b27      	ldr	r3, [pc, #156]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e88:	4a26      	ldr	r2, [pc, #152]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e90:	4b24      	ldr	r3, [pc, #144]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea0:	4b21      	ldr	r3, [pc, #132]	@ (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d118      	bne.n	8001ede <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eac:	4b1e      	ldr	r3, [pc, #120]	@ (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb8:	f7ff fc5c 	bl	8001774 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec0:	f7ff fc58 	bl	8001774 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e1b8      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed2:	4b15      	ldr	r3, [pc, #84]	@ (8001f28 <HAL_RCC_OscConfig+0x508>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d108      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x4d8>
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ef6:	e029      	b.n	8001f4c <HAL_RCC_OscConfig+0x52c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d115      	bne.n	8001f2c <HAL_RCC_OscConfig+0x50c>
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f06:	4a07      	ldr	r2, [pc, #28]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f10:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f16:	4a03      	ldr	r2, [pc, #12]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001f18:	f043 0301 	orr.w	r3, r3, #1
 8001f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f20:	e014      	b.n	8001f4c <HAL_RCC_OscConfig+0x52c>
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	4b9d      	ldr	r3, [pc, #628]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8001f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f32:	4a9c      	ldr	r2, [pc, #624]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f3c:	4b99      	ldr	r3, [pc, #612]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8001f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f42:	4a98      	ldr	r2, [pc, #608]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d016      	beq.n	8001f82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7ff fc0e 	bl	8001774 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fc0a 	bl	8001774 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e168      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f72:	4b8c      	ldr	r3, [pc, #560]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ed      	beq.n	8001f5c <HAL_RCC_OscConfig+0x53c>
 8001f80:	e015      	b.n	8001fae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7ff fbf7 	bl	8001774 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7ff fbf3 	bl	8001774 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e151      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa0:	4b80      	ldr	r3, [pc, #512]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8001fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ed      	bne.n	8001f8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fae:	7ffb      	ldrb	r3, [r7, #31]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d105      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb4:	4b7b      	ldr	r3, [pc, #492]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8001fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb8:	4a7a      	ldr	r2, [pc, #488]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8001fba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0320 	and.w	r3, r3, #32
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d03c      	beq.n	8002046 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d01c      	beq.n	800200e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fd4:	4b73      	ldr	r3, [pc, #460]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8001fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fda:	4a72      	ldr	r2, [pc, #456]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe4:	f7ff fbc6 	bl	8001774 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fec:	f7ff fbc2 	bl	8001774 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e122      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ffe:	4b69      	ldr	r3, [pc, #420]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8002000:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ef      	beq.n	8001fec <HAL_RCC_OscConfig+0x5cc>
 800200c:	e01b      	b.n	8002046 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800200e:	4b65      	ldr	r3, [pc, #404]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8002010:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002014:	4a63      	ldr	r2, [pc, #396]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8002016:	f023 0301 	bic.w	r3, r3, #1
 800201a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff fba9 	bl	8001774 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002026:	f7ff fba5 	bl	8001774 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e105      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002038:	4b5a      	ldr	r3, [pc, #360]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 800203a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ef      	bne.n	8002026 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80f9 	beq.w	8002242 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002054:	2b02      	cmp	r3, #2
 8002056:	f040 80cf 	bne.w	80021f8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800205a:	4b52      	ldr	r3, [pc, #328]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f003 0203 	and.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	429a      	cmp	r2, r3
 800206c:	d12c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	3b01      	subs	r3, #1
 800207a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207c:	429a      	cmp	r2, r3
 800207e:	d123      	bne.n	80020c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800208a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800208c:	429a      	cmp	r2, r3
 800208e:	d11b      	bne.n	80020c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800209a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d113      	bne.n	80020c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020aa:	085b      	lsrs	r3, r3, #1
 80020ac:	3b01      	subs	r3, #1
 80020ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d109      	bne.n	80020c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	3b01      	subs	r3, #1
 80020c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d071      	beq.n	80021ac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d068      	beq.n	80021a0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020ce:	4b35      	ldr	r3, [pc, #212]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d105      	bne.n	80020e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020da:	4b32      	ldr	r3, [pc, #200]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e0ac      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80020ea:	4b2e      	ldr	r3, [pc, #184]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2d      	ldr	r2, [pc, #180]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 80020f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020f6:	f7ff fb3d 	bl	8001774 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fe:	f7ff fb39 	bl	8001774 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e099      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002110:	4b24      	ldr	r3, [pc, #144]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800211c:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <HAL_RCC_OscConfig+0x788>)
 8002122:	4013      	ands	r3, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800212c:	3a01      	subs	r2, #1
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	4311      	orrs	r1, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002136:	0212      	lsls	r2, r2, #8
 8002138:	4311      	orrs	r1, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800213e:	0852      	lsrs	r2, r2, #1
 8002140:	3a01      	subs	r2, #1
 8002142:	0552      	lsls	r2, r2, #21
 8002144:	4311      	orrs	r1, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800214a:	0852      	lsrs	r2, r2, #1
 800214c:	3a01      	subs	r2, #1
 800214e:	0652      	lsls	r2, r2, #25
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002156:	06d2      	lsls	r2, r2, #27
 8002158:	430a      	orrs	r2, r1
 800215a:	4912      	ldr	r1, [pc, #72]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 800215c:	4313      	orrs	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002160:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0f      	ldr	r2, [pc, #60]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8002166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800216a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800216c:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4a0c      	ldr	r2, [pc, #48]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002176:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002178:	f7ff fafc 	bl	8001774 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002180:	f7ff faf8 	bl	8001774 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e058      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002192:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <HAL_RCC_OscConfig+0x784>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800219e:	e050      	b.n	8002242 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e04f      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ac:	4b27      	ldr	r3, [pc, #156]	@ (800224c <HAL_RCC_OscConfig+0x82c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d144      	bne.n	8002242 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021b8:	4b24      	ldr	r3, [pc, #144]	@ (800224c <HAL_RCC_OscConfig+0x82c>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a23      	ldr	r2, [pc, #140]	@ (800224c <HAL_RCC_OscConfig+0x82c>)
 80021be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c4:	4b21      	ldr	r3, [pc, #132]	@ (800224c <HAL_RCC_OscConfig+0x82c>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a20      	ldr	r2, [pc, #128]	@ (800224c <HAL_RCC_OscConfig+0x82c>)
 80021ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021d0:	f7ff fad0 	bl	8001774 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7ff facc 	bl	8001774 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e02c      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	4b18      	ldr	r3, [pc, #96]	@ (800224c <HAL_RCC_OscConfig+0x82c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x7b8>
 80021f6:	e024      	b.n	8002242 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d01f      	beq.n	800223e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <HAL_RCC_OscConfig+0x82c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a12      	ldr	r2, [pc, #72]	@ (800224c <HAL_RCC_OscConfig+0x82c>)
 8002204:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7ff fab3 	bl	8001774 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7ff faaf 	bl	8001774 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e00f      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <HAL_RCC_OscConfig+0x82c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_RCC_OscConfig+0x82c>)
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	4905      	ldr	r1, [pc, #20]	@ (800224c <HAL_RCC_OscConfig+0x82c>)
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_RCC_OscConfig+0x830>)
 8002238:	4013      	ands	r3, r2
 800223a:	60cb      	str	r3, [r1, #12]
 800223c:	e001      	b.n	8002242 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	feeefffc 	.word	0xfeeefffc

08002254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e0e7      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002268:	4b75      	ldr	r3, [pc, #468]	@ (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d910      	bls.n	8002298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002276:	4b72      	ldr	r3, [pc, #456]	@ (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 0207 	bic.w	r2, r3, #7
 800227e:	4970      	ldr	r1, [pc, #448]	@ (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	4313      	orrs	r3, r2
 8002284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b6e      	ldr	r3, [pc, #440]	@ (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0cf      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d010      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	4b66      	ldr	r3, [pc, #408]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d908      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b63      	ldr	r3, [pc, #396]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	4960      	ldr	r1, [pc, #384]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d04c      	beq.n	800236c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022da:	4b5a      	ldr	r3, [pc, #360]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d121      	bne.n	800232a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0a6      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f2:	4b54      	ldr	r3, [pc, #336]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d115      	bne.n	800232a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e09a      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800230a:	4b4e      	ldr	r3, [pc, #312]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e08e      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800231a:	4b4a      	ldr	r3, [pc, #296]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e086      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800232a:	4b46      	ldr	r3, [pc, #280]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f023 0203 	bic.w	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4943      	ldr	r1, [pc, #268]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800233c:	f7ff fa1a 	bl	8001774 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002342:	e00a      	b.n	800235a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002344:	f7ff fa16 	bl	8001774 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e06e      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	4b3a      	ldr	r3, [pc, #232]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 020c 	and.w	r2, r3, #12
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	429a      	cmp	r2, r3
 800236a:	d1eb      	bne.n	8002344 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0302 	and.w	r3, r3, #2
 8002374:	2b00      	cmp	r3, #0
 8002376:	d010      	beq.n	800239a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	4b31      	ldr	r3, [pc, #196]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002384:	429a      	cmp	r2, r3
 8002386:	d208      	bcs.n	800239a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002388:	4b2e      	ldr	r3, [pc, #184]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	492b      	ldr	r1, [pc, #172]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800239a:	4b29      	ldr	r3, [pc, #164]	@ (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d210      	bcs.n	80023ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a8:	4b25      	ldr	r3, [pc, #148]	@ (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f023 0207 	bic.w	r2, r3, #7
 80023b0:	4923      	ldr	r1, [pc, #140]	@ (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b8:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <HAL_RCC_ClockConfig+0x1ec>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d001      	beq.n	80023ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e036      	b.n	8002438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d008      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	4918      	ldr	r1, [pc, #96]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d009      	beq.n	8002408 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f4:	4b13      	ldr	r3, [pc, #76]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4910      	ldr	r1, [pc, #64]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002408:	f000 f824 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b0d      	ldr	r3, [pc, #52]	@ (8002444 <HAL_RCC_ClockConfig+0x1f0>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	091b      	lsrs	r3, r3, #4
 8002414:	f003 030f 	and.w	r3, r3, #15
 8002418:	490b      	ldr	r1, [pc, #44]	@ (8002448 <HAL_RCC_ClockConfig+0x1f4>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	f003 031f 	and.w	r3, r3, #31
 8002420:	fa22 f303 	lsr.w	r3, r2, r3
 8002424:	4a09      	ldr	r2, [pc, #36]	@ (800244c <HAL_RCC_ClockConfig+0x1f8>)
 8002426:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002428:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <HAL_RCC_ClockConfig+0x1fc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff f951 	bl	80016d4 <HAL_InitTick>
 8002432:	4603      	mov	r3, r0
 8002434:	72fb      	strb	r3, [r7, #11]

  return status;
 8002436:	7afb      	ldrb	r3, [r7, #11]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40022000 	.word	0x40022000
 8002444:	40021000 	.word	0x40021000
 8002448:	08003898 	.word	0x08003898
 800244c:	20000000 	.word	0x20000000
 8002450:	20000004 	.word	0x20000004

08002454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	@ 0x24
 8002458:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002462:	4b3e      	ldr	r3, [pc, #248]	@ (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800246c:	4b3b      	ldr	r3, [pc, #236]	@ (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x34>
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d121      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d11e      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002488:	4b34      	ldr	r3, [pc, #208]	@ (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002494:	4b31      	ldr	r3, [pc, #196]	@ (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e005      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	@ (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024cc:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e004      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024d8:	4b23      	ldr	r3, [pc, #140]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x114>)
 80024da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d134      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024e2:	4b1e      	ldr	r3, [pc, #120]	@ (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0xa6>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d003      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0xac>
 80024f8:	e005      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x110>)
 80024fc:	617b      	str	r3, [r7, #20]
      break;
 80024fe:	e005      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002500:	4b19      	ldr	r3, [pc, #100]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x114>)
 8002502:	617b      	str	r3, [r7, #20]
      break;
 8002504:	e002      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	617b      	str	r3, [r7, #20]
      break;
 800250a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800250c:	4b13      	ldr	r3, [pc, #76]	@ (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	3301      	adds	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800251a:	4b10      	ldr	r3, [pc, #64]	@ (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	fb03 f202 	mul.w	r2, r3, r2
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002532:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	0e5b      	lsrs	r3, r3, #25
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	3301      	adds	r3, #1
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800254c:	69bb      	ldr	r3, [r7, #24]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	@ 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	080038a8 	.word	0x080038a8
 8002564:	00f42400 	.word	0x00f42400
 8002568:	007a1200 	.word	0x007a1200

0800256c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002578:	4b2a      	ldr	r3, [pc, #168]	@ (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002584:	f7ff f9e8 	bl	8001958 <HAL_PWREx_GetVoltageRange>
 8002588:	6178      	str	r0, [r7, #20]
 800258a:	e014      	b.n	80025b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800258c:	4b25      	ldr	r3, [pc, #148]	@ (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002590:	4a24      	ldr	r2, [pc, #144]	@ (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002596:	6593      	str	r3, [r2, #88]	@ 0x58
 8002598:	4b22      	ldr	r3, [pc, #136]	@ (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800259c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80025a4:	f7ff f9d8 	bl	8001958 <HAL_PWREx_GetVoltageRange>
 80025a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002624 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025bc:	d10b      	bne.n	80025d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b80      	cmp	r3, #128	@ 0x80
 80025c2:	d919      	bls.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80025c8:	d902      	bls.n	80025d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025ca:	2302      	movs	r3, #2
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	e013      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025d0:	2301      	movs	r3, #1
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	e010      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b80      	cmp	r3, #128	@ 0x80
 80025da:	d902      	bls.n	80025e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025dc:	2303      	movs	r3, #3
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	e00a      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b80      	cmp	r3, #128	@ 0x80
 80025e6:	d102      	bne.n	80025ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025e8:	2302      	movs	r3, #2
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	e004      	b.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b70      	cmp	r3, #112	@ 0x70
 80025f2:	d101      	bne.n	80025f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025f4:	2301      	movs	r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 0207 	bic.w	r2, r3, #7
 8002600:	4909      	ldr	r1, [pc, #36]	@ (8002628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002608:	4b07      	ldr	r3, [pc, #28]	@ (8002628 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	429a      	cmp	r2, r3
 8002614:	d001      	beq.n	800261a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40021000 	.word	0x40021000
 8002628:	40022000 	.word	0x40022000

0800262c <malloc>:
 800262c:	4b02      	ldr	r3, [pc, #8]	@ (8002638 <malloc+0xc>)
 800262e:	4601      	mov	r1, r0
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	f000 b825 	b.w	8002680 <_malloc_r>
 8002636:	bf00      	nop
 8002638:	2000000c 	.word	0x2000000c

0800263c <sbrk_aligned>:
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	4e0f      	ldr	r6, [pc, #60]	@ (800267c <sbrk_aligned+0x40>)
 8002640:	460c      	mov	r4, r1
 8002642:	6831      	ldr	r1, [r6, #0]
 8002644:	4605      	mov	r5, r0
 8002646:	b911      	cbnz	r1, 800264e <sbrk_aligned+0x12>
 8002648:	f000 f8ae 	bl	80027a8 <_sbrk_r>
 800264c:	6030      	str	r0, [r6, #0]
 800264e:	4621      	mov	r1, r4
 8002650:	4628      	mov	r0, r5
 8002652:	f000 f8a9 	bl	80027a8 <_sbrk_r>
 8002656:	1c43      	adds	r3, r0, #1
 8002658:	d103      	bne.n	8002662 <sbrk_aligned+0x26>
 800265a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800265e:	4620      	mov	r0, r4
 8002660:	bd70      	pop	{r4, r5, r6, pc}
 8002662:	1cc4      	adds	r4, r0, #3
 8002664:	f024 0403 	bic.w	r4, r4, #3
 8002668:	42a0      	cmp	r0, r4
 800266a:	d0f8      	beq.n	800265e <sbrk_aligned+0x22>
 800266c:	1a21      	subs	r1, r4, r0
 800266e:	4628      	mov	r0, r5
 8002670:	f000 f89a 	bl	80027a8 <_sbrk_r>
 8002674:	3001      	adds	r0, #1
 8002676:	d1f2      	bne.n	800265e <sbrk_aligned+0x22>
 8002678:	e7ef      	b.n	800265a <sbrk_aligned+0x1e>
 800267a:	bf00      	nop
 800267c:	200000a8 	.word	0x200000a8

08002680 <_malloc_r>:
 8002680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002684:	1ccd      	adds	r5, r1, #3
 8002686:	f025 0503 	bic.w	r5, r5, #3
 800268a:	3508      	adds	r5, #8
 800268c:	2d0c      	cmp	r5, #12
 800268e:	bf38      	it	cc
 8002690:	250c      	movcc	r5, #12
 8002692:	2d00      	cmp	r5, #0
 8002694:	4606      	mov	r6, r0
 8002696:	db01      	blt.n	800269c <_malloc_r+0x1c>
 8002698:	42a9      	cmp	r1, r5
 800269a:	d904      	bls.n	80026a6 <_malloc_r+0x26>
 800269c:	230c      	movs	r3, #12
 800269e:	6033      	str	r3, [r6, #0]
 80026a0:	2000      	movs	r0, #0
 80026a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800277c <_malloc_r+0xfc>
 80026aa:	f000 f869 	bl	8002780 <__malloc_lock>
 80026ae:	f8d8 3000 	ldr.w	r3, [r8]
 80026b2:	461c      	mov	r4, r3
 80026b4:	bb44      	cbnz	r4, 8002708 <_malloc_r+0x88>
 80026b6:	4629      	mov	r1, r5
 80026b8:	4630      	mov	r0, r6
 80026ba:	f7ff ffbf 	bl	800263c <sbrk_aligned>
 80026be:	1c43      	adds	r3, r0, #1
 80026c0:	4604      	mov	r4, r0
 80026c2:	d158      	bne.n	8002776 <_malloc_r+0xf6>
 80026c4:	f8d8 4000 	ldr.w	r4, [r8]
 80026c8:	4627      	mov	r7, r4
 80026ca:	2f00      	cmp	r7, #0
 80026cc:	d143      	bne.n	8002756 <_malloc_r+0xd6>
 80026ce:	2c00      	cmp	r4, #0
 80026d0:	d04b      	beq.n	800276a <_malloc_r+0xea>
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	4639      	mov	r1, r7
 80026d6:	4630      	mov	r0, r6
 80026d8:	eb04 0903 	add.w	r9, r4, r3
 80026dc:	f000 f864 	bl	80027a8 <_sbrk_r>
 80026e0:	4581      	cmp	r9, r0
 80026e2:	d142      	bne.n	800276a <_malloc_r+0xea>
 80026e4:	6821      	ldr	r1, [r4, #0]
 80026e6:	1a6d      	subs	r5, r5, r1
 80026e8:	4629      	mov	r1, r5
 80026ea:	4630      	mov	r0, r6
 80026ec:	f7ff ffa6 	bl	800263c <sbrk_aligned>
 80026f0:	3001      	adds	r0, #1
 80026f2:	d03a      	beq.n	800276a <_malloc_r+0xea>
 80026f4:	6823      	ldr	r3, [r4, #0]
 80026f6:	442b      	add	r3, r5
 80026f8:	6023      	str	r3, [r4, #0]
 80026fa:	f8d8 3000 	ldr.w	r3, [r8]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	bb62      	cbnz	r2, 800275c <_malloc_r+0xdc>
 8002702:	f8c8 7000 	str.w	r7, [r8]
 8002706:	e00f      	b.n	8002728 <_malloc_r+0xa8>
 8002708:	6822      	ldr	r2, [r4, #0]
 800270a:	1b52      	subs	r2, r2, r5
 800270c:	d420      	bmi.n	8002750 <_malloc_r+0xd0>
 800270e:	2a0b      	cmp	r2, #11
 8002710:	d917      	bls.n	8002742 <_malloc_r+0xc2>
 8002712:	1961      	adds	r1, r4, r5
 8002714:	42a3      	cmp	r3, r4
 8002716:	6025      	str	r5, [r4, #0]
 8002718:	bf18      	it	ne
 800271a:	6059      	strne	r1, [r3, #4]
 800271c:	6863      	ldr	r3, [r4, #4]
 800271e:	bf08      	it	eq
 8002720:	f8c8 1000 	streq.w	r1, [r8]
 8002724:	5162      	str	r2, [r4, r5]
 8002726:	604b      	str	r3, [r1, #4]
 8002728:	4630      	mov	r0, r6
 800272a:	f000 f82f 	bl	800278c <__malloc_unlock>
 800272e:	f104 000b 	add.w	r0, r4, #11
 8002732:	1d23      	adds	r3, r4, #4
 8002734:	f020 0007 	bic.w	r0, r0, #7
 8002738:	1ac2      	subs	r2, r0, r3
 800273a:	bf1c      	itt	ne
 800273c:	1a1b      	subne	r3, r3, r0
 800273e:	50a3      	strne	r3, [r4, r2]
 8002740:	e7af      	b.n	80026a2 <_malloc_r+0x22>
 8002742:	6862      	ldr	r2, [r4, #4]
 8002744:	42a3      	cmp	r3, r4
 8002746:	bf0c      	ite	eq
 8002748:	f8c8 2000 	streq.w	r2, [r8]
 800274c:	605a      	strne	r2, [r3, #4]
 800274e:	e7eb      	b.n	8002728 <_malloc_r+0xa8>
 8002750:	4623      	mov	r3, r4
 8002752:	6864      	ldr	r4, [r4, #4]
 8002754:	e7ae      	b.n	80026b4 <_malloc_r+0x34>
 8002756:	463c      	mov	r4, r7
 8002758:	687f      	ldr	r7, [r7, #4]
 800275a:	e7b6      	b.n	80026ca <_malloc_r+0x4a>
 800275c:	461a      	mov	r2, r3
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	42a3      	cmp	r3, r4
 8002762:	d1fb      	bne.n	800275c <_malloc_r+0xdc>
 8002764:	2300      	movs	r3, #0
 8002766:	6053      	str	r3, [r2, #4]
 8002768:	e7de      	b.n	8002728 <_malloc_r+0xa8>
 800276a:	230c      	movs	r3, #12
 800276c:	6033      	str	r3, [r6, #0]
 800276e:	4630      	mov	r0, r6
 8002770:	f000 f80c 	bl	800278c <__malloc_unlock>
 8002774:	e794      	b.n	80026a0 <_malloc_r+0x20>
 8002776:	6005      	str	r5, [r0, #0]
 8002778:	e7d6      	b.n	8002728 <_malloc_r+0xa8>
 800277a:	bf00      	nop
 800277c:	200000ac 	.word	0x200000ac

08002780 <__malloc_lock>:
 8002780:	4801      	ldr	r0, [pc, #4]	@ (8002788 <__malloc_lock+0x8>)
 8002782:	f000 b84b 	b.w	800281c <__retarget_lock_acquire_recursive>
 8002786:	bf00      	nop
 8002788:	200001ec 	.word	0x200001ec

0800278c <__malloc_unlock>:
 800278c:	4801      	ldr	r0, [pc, #4]	@ (8002794 <__malloc_unlock+0x8>)
 800278e:	f000 b846 	b.w	800281e <__retarget_lock_release_recursive>
 8002792:	bf00      	nop
 8002794:	200001ec 	.word	0x200001ec

08002798 <memset>:
 8002798:	4402      	add	r2, r0
 800279a:	4603      	mov	r3, r0
 800279c:	4293      	cmp	r3, r2
 800279e:	d100      	bne.n	80027a2 <memset+0xa>
 80027a0:	4770      	bx	lr
 80027a2:	f803 1b01 	strb.w	r1, [r3], #1
 80027a6:	e7f9      	b.n	800279c <memset+0x4>

080027a8 <_sbrk_r>:
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4d06      	ldr	r5, [pc, #24]	@ (80027c4 <_sbrk_r+0x1c>)
 80027ac:	2300      	movs	r3, #0
 80027ae:	4604      	mov	r4, r0
 80027b0:	4608      	mov	r0, r1
 80027b2:	602b      	str	r3, [r5, #0]
 80027b4:	f7fe fe90 	bl	80014d8 <_sbrk>
 80027b8:	1c43      	adds	r3, r0, #1
 80027ba:	d102      	bne.n	80027c2 <_sbrk_r+0x1a>
 80027bc:	682b      	ldr	r3, [r5, #0]
 80027be:	b103      	cbz	r3, 80027c2 <_sbrk_r+0x1a>
 80027c0:	6023      	str	r3, [r4, #0]
 80027c2:	bd38      	pop	{r3, r4, r5, pc}
 80027c4:	200001e8 	.word	0x200001e8

080027c8 <__errno>:
 80027c8:	4b01      	ldr	r3, [pc, #4]	@ (80027d0 <__errno+0x8>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	2000000c 	.word	0x2000000c

080027d4 <__libc_init_array>:
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	4d0d      	ldr	r5, [pc, #52]	@ (800280c <__libc_init_array+0x38>)
 80027d8:	4c0d      	ldr	r4, [pc, #52]	@ (8002810 <__libc_init_array+0x3c>)
 80027da:	1b64      	subs	r4, r4, r5
 80027dc:	10a4      	asrs	r4, r4, #2
 80027de:	2600      	movs	r6, #0
 80027e0:	42a6      	cmp	r6, r4
 80027e2:	d109      	bne.n	80027f8 <__libc_init_array+0x24>
 80027e4:	4d0b      	ldr	r5, [pc, #44]	@ (8002814 <__libc_init_array+0x40>)
 80027e6:	4c0c      	ldr	r4, [pc, #48]	@ (8002818 <__libc_init_array+0x44>)
 80027e8:	f001 f84a 	bl	8003880 <_init>
 80027ec:	1b64      	subs	r4, r4, r5
 80027ee:	10a4      	asrs	r4, r4, #2
 80027f0:	2600      	movs	r6, #0
 80027f2:	42a6      	cmp	r6, r4
 80027f4:	d105      	bne.n	8002802 <__libc_init_array+0x2e>
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
 80027f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027fc:	4798      	blx	r3
 80027fe:	3601      	adds	r6, #1
 8002800:	e7ee      	b.n	80027e0 <__libc_init_array+0xc>
 8002802:	f855 3b04 	ldr.w	r3, [r5], #4
 8002806:	4798      	blx	r3
 8002808:	3601      	adds	r6, #1
 800280a:	e7f2      	b.n	80027f2 <__libc_init_array+0x1e>
 800280c:	08003cc0 	.word	0x08003cc0
 8002810:	08003cc0 	.word	0x08003cc0
 8002814:	08003cc0 	.word	0x08003cc0
 8002818:	08003cc4 	.word	0x08003cc4

0800281c <__retarget_lock_acquire_recursive>:
 800281c:	4770      	bx	lr

0800281e <__retarget_lock_release_recursive>:
 800281e:	4770      	bx	lr

08002820 <sinhf>:
 8002820:	b508      	push	{r3, lr}
 8002822:	ed2d 8b02 	vpush	{d8}
 8002826:	eef0 8a40 	vmov.f32	s17, s0
 800282a:	f000 fa87 	bl	8002d3c <__ieee754_sinhf>
 800282e:	eeb0 8a40 	vmov.f32	s16, s0
 8002832:	f000 f8a9 	bl	8002988 <finitef>
 8002836:	b998      	cbnz	r0, 8002860 <sinhf+0x40>
 8002838:	eeb0 0a68 	vmov.f32	s0, s17
 800283c:	f000 f8a4 	bl	8002988 <finitef>
 8002840:	b170      	cbz	r0, 8002860 <sinhf+0x40>
 8002842:	f7ff ffc1 	bl	80027c8 <__errno>
 8002846:	ed9f 8a09 	vldr	s16, [pc, #36]	@ 800286c <sinhf+0x4c>
 800284a:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8002870 <sinhf+0x50>
 800284e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8002852:	2322      	movs	r3, #34	@ 0x22
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	6003      	str	r3, [r0, #0]
 800285a:	bfd8      	it	le
 800285c:	eeb0 8a67 	vmovle.f32	s16, s15
 8002860:	eeb0 0a48 	vmov.f32	s0, s16
 8002864:	ecbd 8b02 	vpop	{d8}
 8002868:	bd08      	pop	{r3, pc}
 800286a:	bf00      	nop
 800286c:	7f800000 	.word	0x7f800000
 8002870:	ff800000 	.word	0xff800000

08002874 <cosf>:
 8002874:	ee10 3a10 	vmov	r3, s0
 8002878:	b507      	push	{r0, r1, r2, lr}
 800287a:	4a1e      	ldr	r2, [pc, #120]	@ (80028f4 <cosf+0x80>)
 800287c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002880:	4293      	cmp	r3, r2
 8002882:	d806      	bhi.n	8002892 <cosf+0x1e>
 8002884:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80028f8 <cosf+0x84>
 8002888:	b003      	add	sp, #12
 800288a:	f85d eb04 	ldr.w	lr, [sp], #4
 800288e:	f000 b885 	b.w	800299c <__kernel_cosf>
 8002892:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8002896:	d304      	bcc.n	80028a2 <cosf+0x2e>
 8002898:	ee30 0a40 	vsub.f32	s0, s0, s0
 800289c:	b003      	add	sp, #12
 800289e:	f85d fb04 	ldr.w	pc, [sp], #4
 80028a2:	4668      	mov	r0, sp
 80028a4:	f000 f91a 	bl	8002adc <__ieee754_rem_pio2f>
 80028a8:	f000 0003 	and.w	r0, r0, #3
 80028ac:	2801      	cmp	r0, #1
 80028ae:	d009      	beq.n	80028c4 <cosf+0x50>
 80028b0:	2802      	cmp	r0, #2
 80028b2:	d010      	beq.n	80028d6 <cosf+0x62>
 80028b4:	b9b0      	cbnz	r0, 80028e4 <cosf+0x70>
 80028b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80028ba:	ed9d 0a00 	vldr	s0, [sp]
 80028be:	f000 f86d 	bl	800299c <__kernel_cosf>
 80028c2:	e7eb      	b.n	800289c <cosf+0x28>
 80028c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80028c8:	ed9d 0a00 	vldr	s0, [sp]
 80028cc:	f000 f8be 	bl	8002a4c <__kernel_sinf>
 80028d0:	eeb1 0a40 	vneg.f32	s0, s0
 80028d4:	e7e2      	b.n	800289c <cosf+0x28>
 80028d6:	eddd 0a01 	vldr	s1, [sp, #4]
 80028da:	ed9d 0a00 	vldr	s0, [sp]
 80028de:	f000 f85d 	bl	800299c <__kernel_cosf>
 80028e2:	e7f5      	b.n	80028d0 <cosf+0x5c>
 80028e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80028e8:	ed9d 0a00 	vldr	s0, [sp]
 80028ec:	2001      	movs	r0, #1
 80028ee:	f000 f8ad 	bl	8002a4c <__kernel_sinf>
 80028f2:	e7d3      	b.n	800289c <cosf+0x28>
 80028f4:	3f490fd8 	.word	0x3f490fd8
 80028f8:	00000000 	.word	0x00000000

080028fc <sinf>:
 80028fc:	ee10 3a10 	vmov	r3, s0
 8002900:	b507      	push	{r0, r1, r2, lr}
 8002902:	4a1f      	ldr	r2, [pc, #124]	@ (8002980 <sinf+0x84>)
 8002904:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002908:	4293      	cmp	r3, r2
 800290a:	d807      	bhi.n	800291c <sinf+0x20>
 800290c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8002984 <sinf+0x88>
 8002910:	2000      	movs	r0, #0
 8002912:	b003      	add	sp, #12
 8002914:	f85d eb04 	ldr.w	lr, [sp], #4
 8002918:	f000 b898 	b.w	8002a4c <__kernel_sinf>
 800291c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8002920:	d304      	bcc.n	800292c <sinf+0x30>
 8002922:	ee30 0a40 	vsub.f32	s0, s0, s0
 8002926:	b003      	add	sp, #12
 8002928:	f85d fb04 	ldr.w	pc, [sp], #4
 800292c:	4668      	mov	r0, sp
 800292e:	f000 f8d5 	bl	8002adc <__ieee754_rem_pio2f>
 8002932:	f000 0003 	and.w	r0, r0, #3
 8002936:	2801      	cmp	r0, #1
 8002938:	d00a      	beq.n	8002950 <sinf+0x54>
 800293a:	2802      	cmp	r0, #2
 800293c:	d00f      	beq.n	800295e <sinf+0x62>
 800293e:	b9c0      	cbnz	r0, 8002972 <sinf+0x76>
 8002940:	eddd 0a01 	vldr	s1, [sp, #4]
 8002944:	ed9d 0a00 	vldr	s0, [sp]
 8002948:	2001      	movs	r0, #1
 800294a:	f000 f87f 	bl	8002a4c <__kernel_sinf>
 800294e:	e7ea      	b.n	8002926 <sinf+0x2a>
 8002950:	eddd 0a01 	vldr	s1, [sp, #4]
 8002954:	ed9d 0a00 	vldr	s0, [sp]
 8002958:	f000 f820 	bl	800299c <__kernel_cosf>
 800295c:	e7e3      	b.n	8002926 <sinf+0x2a>
 800295e:	eddd 0a01 	vldr	s1, [sp, #4]
 8002962:	ed9d 0a00 	vldr	s0, [sp]
 8002966:	2001      	movs	r0, #1
 8002968:	f000 f870 	bl	8002a4c <__kernel_sinf>
 800296c:	eeb1 0a40 	vneg.f32	s0, s0
 8002970:	e7d9      	b.n	8002926 <sinf+0x2a>
 8002972:	eddd 0a01 	vldr	s1, [sp, #4]
 8002976:	ed9d 0a00 	vldr	s0, [sp]
 800297a:	f000 f80f 	bl	800299c <__kernel_cosf>
 800297e:	e7f5      	b.n	800296c <sinf+0x70>
 8002980:	3f490fd8 	.word	0x3f490fd8
 8002984:	00000000 	.word	0x00000000

08002988 <finitef>:
 8002988:	ee10 3a10 	vmov	r3, s0
 800298c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8002990:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8002994:	bfac      	ite	ge
 8002996:	2000      	movge	r0, #0
 8002998:	2001      	movlt	r0, #1
 800299a:	4770      	bx	lr

0800299c <__kernel_cosf>:
 800299c:	ee10 3a10 	vmov	r3, s0
 80029a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029a4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80029a8:	eef0 6a40 	vmov.f32	s13, s0
 80029ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80029b0:	d204      	bcs.n	80029bc <__kernel_cosf+0x20>
 80029b2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80029b6:	ee17 2a90 	vmov	r2, s15
 80029ba:	b342      	cbz	r2, 8002a0e <__kernel_cosf+0x72>
 80029bc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80029c0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8002a2c <__kernel_cosf+0x90>
 80029c4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8002a30 <__kernel_cosf+0x94>
 80029c8:	4a1a      	ldr	r2, [pc, #104]	@ (8002a34 <__kernel_cosf+0x98>)
 80029ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 80029ce:	4293      	cmp	r3, r2
 80029d0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002a38 <__kernel_cosf+0x9c>
 80029d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80029d8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8002a3c <__kernel_cosf+0xa0>
 80029dc:	eea7 6a87 	vfma.f32	s12, s15, s14
 80029e0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8002a40 <__kernel_cosf+0xa4>
 80029e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80029e8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8002a44 <__kernel_cosf+0xa8>
 80029ec:	eea7 6a87 	vfma.f32	s12, s15, s14
 80029f0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80029f4:	ee26 6a07 	vmul.f32	s12, s12, s14
 80029f8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80029fc:	eee7 0a06 	vfma.f32	s1, s14, s12
 8002a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a04:	d804      	bhi.n	8002a10 <__kernel_cosf+0x74>
 8002a06:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8002a0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002a0e:	4770      	bx	lr
 8002a10:	4a0d      	ldr	r2, [pc, #52]	@ (8002a48 <__kernel_cosf+0xac>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	bf9a      	itte	ls
 8002a16:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8002a1a:	ee07 3a10 	vmovls	s14, r3
 8002a1e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8002a22:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a2a:	e7ec      	b.n	8002a06 <__kernel_cosf+0x6a>
 8002a2c:	ad47d74e 	.word	0xad47d74e
 8002a30:	310f74f6 	.word	0x310f74f6
 8002a34:	3e999999 	.word	0x3e999999
 8002a38:	b493f27c 	.word	0xb493f27c
 8002a3c:	37d00d01 	.word	0x37d00d01
 8002a40:	bab60b61 	.word	0xbab60b61
 8002a44:	3d2aaaab 	.word	0x3d2aaaab
 8002a48:	3f480000 	.word	0x3f480000

08002a4c <__kernel_sinf>:
 8002a4c:	ee10 3a10 	vmov	r3, s0
 8002a50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a54:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8002a58:	d204      	bcs.n	8002a64 <__kernel_sinf+0x18>
 8002a5a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002a5e:	ee17 3a90 	vmov	r3, s15
 8002a62:	b35b      	cbz	r3, 8002abc <__kernel_sinf+0x70>
 8002a64:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002a68:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8002ac0 <__kernel_sinf+0x74>
 8002a6c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8002ac4 <__kernel_sinf+0x78>
 8002a70:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002a74:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8002ac8 <__kernel_sinf+0x7c>
 8002a78:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002a7c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8002acc <__kernel_sinf+0x80>
 8002a80:	eea7 6a87 	vfma.f32	s12, s15, s14
 8002a84:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8002ad0 <__kernel_sinf+0x84>
 8002a88:	ee60 6a07 	vmul.f32	s13, s0, s14
 8002a8c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8002a90:	b930      	cbnz	r0, 8002aa0 <__kernel_sinf+0x54>
 8002a92:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8002ad4 <__kernel_sinf+0x88>
 8002a96:	eea7 6a27 	vfma.f32	s12, s14, s15
 8002a9a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8002a9e:	4770      	bx	lr
 8002aa0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8002aa4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8002aa8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8002aac:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8002ab0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8002ad8 <__kernel_sinf+0x8c>
 8002ab4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8002ab8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	2f2ec9d3 	.word	0x2f2ec9d3
 8002ac4:	b2d72f34 	.word	0xb2d72f34
 8002ac8:	3638ef1b 	.word	0x3638ef1b
 8002acc:	b9500d01 	.word	0xb9500d01
 8002ad0:	3c088889 	.word	0x3c088889
 8002ad4:	be2aaaab 	.word	0xbe2aaaab
 8002ad8:	3e2aaaab 	.word	0x3e2aaaab

08002adc <__ieee754_rem_pio2f>:
 8002adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ade:	ee10 6a10 	vmov	r6, s0
 8002ae2:	4b88      	ldr	r3, [pc, #544]	@ (8002d04 <__ieee754_rem_pio2f+0x228>)
 8002ae4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8002ae8:	429d      	cmp	r5, r3
 8002aea:	b087      	sub	sp, #28
 8002aec:	4604      	mov	r4, r0
 8002aee:	d805      	bhi.n	8002afc <__ieee754_rem_pio2f+0x20>
 8002af0:	2300      	movs	r3, #0
 8002af2:	ed80 0a00 	vstr	s0, [r0]
 8002af6:	6043      	str	r3, [r0, #4]
 8002af8:	2000      	movs	r0, #0
 8002afa:	e022      	b.n	8002b42 <__ieee754_rem_pio2f+0x66>
 8002afc:	4b82      	ldr	r3, [pc, #520]	@ (8002d08 <__ieee754_rem_pio2f+0x22c>)
 8002afe:	429d      	cmp	r5, r3
 8002b00:	d83a      	bhi.n	8002b78 <__ieee754_rem_pio2f+0x9c>
 8002b02:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8002b06:	2e00      	cmp	r6, #0
 8002b08:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8002d0c <__ieee754_rem_pio2f+0x230>
 8002b0c:	4a80      	ldr	r2, [pc, #512]	@ (8002d10 <__ieee754_rem_pio2f+0x234>)
 8002b0e:	f023 030f 	bic.w	r3, r3, #15
 8002b12:	dd18      	ble.n	8002b46 <__ieee754_rem_pio2f+0x6a>
 8002b14:	4293      	cmp	r3, r2
 8002b16:	ee70 7a47 	vsub.f32	s15, s0, s14
 8002b1a:	bf09      	itett	eq
 8002b1c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8002d14 <__ieee754_rem_pio2f+0x238>
 8002b20:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8002d18 <__ieee754_rem_pio2f+0x23c>
 8002b24:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8002d1c <__ieee754_rem_pio2f+0x240>
 8002b28:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8002b2c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8002b30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b34:	ed80 7a00 	vstr	s14, [r0]
 8002b38:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002b3c:	edc0 7a01 	vstr	s15, [r0, #4]
 8002b40:	2001      	movs	r0, #1
 8002b42:	b007      	add	sp, #28
 8002b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b46:	4293      	cmp	r3, r2
 8002b48:	ee70 7a07 	vadd.f32	s15, s0, s14
 8002b4c:	bf09      	itett	eq
 8002b4e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8002d14 <__ieee754_rem_pio2f+0x238>
 8002b52:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8002d18 <__ieee754_rem_pio2f+0x23c>
 8002b56:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8002d1c <__ieee754_rem_pio2f+0x240>
 8002b5a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8002b5e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8002b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b66:	ed80 7a00 	vstr	s14, [r0]
 8002b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6e:	edc0 7a01 	vstr	s15, [r0, #4]
 8002b72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b76:	e7e4      	b.n	8002b42 <__ieee754_rem_pio2f+0x66>
 8002b78:	4b69      	ldr	r3, [pc, #420]	@ (8002d20 <__ieee754_rem_pio2f+0x244>)
 8002b7a:	429d      	cmp	r5, r3
 8002b7c:	d873      	bhi.n	8002c66 <__ieee754_rem_pio2f+0x18a>
 8002b7e:	f000 f949 	bl	8002e14 <fabsf>
 8002b82:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8002d24 <__ieee754_rem_pio2f+0x248>
 8002b86:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002b8a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b96:	ee17 0a90 	vmov	r0, s15
 8002b9a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8002d0c <__ieee754_rem_pio2f+0x230>
 8002b9e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8002ba2:	281f      	cmp	r0, #31
 8002ba4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8002d18 <__ieee754_rem_pio2f+0x23c>
 8002ba8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bac:	eeb1 6a47 	vneg.f32	s12, s14
 8002bb0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002bb4:	ee16 1a90 	vmov	r1, s13
 8002bb8:	dc09      	bgt.n	8002bce <__ieee754_rem_pio2f+0xf2>
 8002bba:	4a5b      	ldr	r2, [pc, #364]	@ (8002d28 <__ieee754_rem_pio2f+0x24c>)
 8002bbc:	1e47      	subs	r7, r0, #1
 8002bbe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8002bc2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8002bc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d107      	bne.n	8002bde <__ieee754_rem_pio2f+0x102>
 8002bce:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8002bd2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8002bd6:	2a08      	cmp	r2, #8
 8002bd8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8002bdc:	dc14      	bgt.n	8002c08 <__ieee754_rem_pio2f+0x12c>
 8002bde:	6021      	str	r1, [r4, #0]
 8002be0:	ed94 7a00 	vldr	s14, [r4]
 8002be4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002be8:	2e00      	cmp	r6, #0
 8002bea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002bee:	ed84 0a01 	vstr	s0, [r4, #4]
 8002bf2:	daa6      	bge.n	8002b42 <__ieee754_rem_pio2f+0x66>
 8002bf4:	eeb1 7a47 	vneg.f32	s14, s14
 8002bf8:	eeb1 0a40 	vneg.f32	s0, s0
 8002bfc:	ed84 7a00 	vstr	s14, [r4]
 8002c00:	ed84 0a01 	vstr	s0, [r4, #4]
 8002c04:	4240      	negs	r0, r0
 8002c06:	e79c      	b.n	8002b42 <__ieee754_rem_pio2f+0x66>
 8002c08:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8002d14 <__ieee754_rem_pio2f+0x238>
 8002c0c:	eef0 6a40 	vmov.f32	s13, s0
 8002c10:	eee6 6a25 	vfma.f32	s13, s12, s11
 8002c14:	ee70 7a66 	vsub.f32	s15, s0, s13
 8002c18:	eee6 7a25 	vfma.f32	s15, s12, s11
 8002c1c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002d1c <__ieee754_rem_pio2f+0x240>
 8002c20:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8002c24:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8002c28:	ee15 2a90 	vmov	r2, s11
 8002c2c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8002c30:	1a5b      	subs	r3, r3, r1
 8002c32:	2b19      	cmp	r3, #25
 8002c34:	dc04      	bgt.n	8002c40 <__ieee754_rem_pio2f+0x164>
 8002c36:	edc4 5a00 	vstr	s11, [r4]
 8002c3a:	eeb0 0a66 	vmov.f32	s0, s13
 8002c3e:	e7cf      	b.n	8002be0 <__ieee754_rem_pio2f+0x104>
 8002c40:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8002d2c <__ieee754_rem_pio2f+0x250>
 8002c44:	eeb0 0a66 	vmov.f32	s0, s13
 8002c48:	eea6 0a25 	vfma.f32	s0, s12, s11
 8002c4c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8002c50:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002d30 <__ieee754_rem_pio2f+0x254>
 8002c54:	eee6 7a25 	vfma.f32	s15, s12, s11
 8002c58:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8002c5c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002c60:	ed84 7a00 	vstr	s14, [r4]
 8002c64:	e7bc      	b.n	8002be0 <__ieee754_rem_pio2f+0x104>
 8002c66:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8002c6a:	d306      	bcc.n	8002c7a <__ieee754_rem_pio2f+0x19e>
 8002c6c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002c70:	edc0 7a01 	vstr	s15, [r0, #4]
 8002c74:	edc0 7a00 	vstr	s15, [r0]
 8002c78:	e73e      	b.n	8002af8 <__ieee754_rem_pio2f+0x1c>
 8002c7a:	15ea      	asrs	r2, r5, #23
 8002c7c:	3a86      	subs	r2, #134	@ 0x86
 8002c7e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002c8a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8002d34 <__ieee754_rem_pio2f+0x258>
 8002c8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c96:	ed8d 7a03 	vstr	s14, [sp, #12]
 8002c9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ca6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002caa:	ed8d 7a04 	vstr	s14, [sp, #16]
 8002cae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cba:	edcd 7a05 	vstr	s15, [sp, #20]
 8002cbe:	d11e      	bne.n	8002cfe <__ieee754_rem_pio2f+0x222>
 8002cc0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8002cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2302      	movne	r3, #2
 8002cce:	491a      	ldr	r1, [pc, #104]	@ (8002d38 <__ieee754_rem_pio2f+0x25c>)
 8002cd0:	9101      	str	r1, [sp, #4]
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	9100      	str	r1, [sp, #0]
 8002cd6:	a803      	add	r0, sp, #12
 8002cd8:	4621      	mov	r1, r4
 8002cda:	f000 f9f1 	bl	80030c0 <__kernel_rem_pio2f>
 8002cde:	2e00      	cmp	r6, #0
 8002ce0:	f6bf af2f 	bge.w	8002b42 <__ieee754_rem_pio2f+0x66>
 8002ce4:	edd4 7a00 	vldr	s15, [r4]
 8002ce8:	eef1 7a67 	vneg.f32	s15, s15
 8002cec:	edc4 7a00 	vstr	s15, [r4]
 8002cf0:	edd4 7a01 	vldr	s15, [r4, #4]
 8002cf4:	eef1 7a67 	vneg.f32	s15, s15
 8002cf8:	edc4 7a01 	vstr	s15, [r4, #4]
 8002cfc:	e782      	b.n	8002c04 <__ieee754_rem_pio2f+0x128>
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e7e5      	b.n	8002cce <__ieee754_rem_pio2f+0x1f2>
 8002d02:	bf00      	nop
 8002d04:	3f490fd8 	.word	0x3f490fd8
 8002d08:	4016cbe3 	.word	0x4016cbe3
 8002d0c:	3fc90f80 	.word	0x3fc90f80
 8002d10:	3fc90fd0 	.word	0x3fc90fd0
 8002d14:	37354400 	.word	0x37354400
 8002d18:	37354443 	.word	0x37354443
 8002d1c:	2e85a308 	.word	0x2e85a308
 8002d20:	43490f80 	.word	0x43490f80
 8002d24:	3f22f984 	.word	0x3f22f984
 8002d28:	080038d8 	.word	0x080038d8
 8002d2c:	2e85a300 	.word	0x2e85a300
 8002d30:	248d3132 	.word	0x248d3132
 8002d34:	43800000 	.word	0x43800000
 8002d38:	08003958 	.word	0x08003958

08002d3c <__ieee754_sinhf>:
 8002d3c:	b510      	push	{r4, lr}
 8002d3e:	ee10 3a10 	vmov	r3, s0
 8002d42:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 8002d46:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8002d4a:	ed2d 8b02 	vpush	{d8}
 8002d4e:	eef0 7a40 	vmov.f32	s15, s0
 8002d52:	d306      	bcc.n	8002d62 <__ieee754_sinhf+0x26>
 8002d54:	ee70 7a00 	vadd.f32	s15, s0, s0
 8002d58:	ecbd 8b02 	vpop	{d8}
 8002d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d60:	bd10      	pop	{r4, pc}
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <__ieee754_sinhf+0xc8>)
 8002d66:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8002d6a:	eebe 8a00 	vmov.f32	s16, #224	@ 0xbf000000 -0.5
 8002d6e:	bfa8      	it	ge
 8002d70:	eeb0 8a68 	vmovge.f32	s16, s17
 8002d74:	429c      	cmp	r4, r3
 8002d76:	d82c      	bhi.n	8002dd2 <__ieee754_sinhf+0x96>
 8002d78:	f1b4 5f46 	cmp.w	r4, #830472192	@ 0x31800000
 8002d7c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8002d80:	d208      	bcs.n	8002d94 <__ieee754_sinhf+0x58>
 8002d82:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002e08 <__ieee754_sinhf+0xcc>
 8002d86:	ee30 7a07 	vadd.f32	s14, s0, s14
 8002d8a:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8002d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d92:	dce1      	bgt.n	8002d58 <__ieee754_sinhf+0x1c>
 8002d94:	eeb0 0a67 	vmov.f32	s0, s15
 8002d98:	f000 f83c 	bl	8002e14 <fabsf>
 8002d9c:	f000 f842 	bl	8002e24 <expm1f>
 8002da0:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8002da4:	d20c      	bcs.n	8002dc0 <__ieee754_sinhf+0x84>
 8002da6:	ee20 7a00 	vmul.f32	s14, s0, s0
 8002daa:	ee70 8a28 	vadd.f32	s17, s0, s17
 8002dae:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8002db2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002db6:	eed0 7a07 	vfnms.f32	s15, s0, s14
 8002dba:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002dbe:	e7cb      	b.n	8002d58 <__ieee754_sinhf+0x1c>
 8002dc0:	ee70 8a28 	vadd.f32	s17, s0, s17
 8002dc4:	eec0 7a28 	vdiv.f32	s15, s0, s17
 8002dc8:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002dcc:	ee60 7a08 	vmul.f32	s15, s0, s16
 8002dd0:	e7c2      	b.n	8002d58 <__ieee754_sinhf+0x1c>
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <__ieee754_sinhf+0xd0>)
 8002dd4:	429c      	cmp	r4, r3
 8002dd6:	d804      	bhi.n	8002de2 <__ieee754_sinhf+0xa6>
 8002dd8:	f000 f81c 	bl	8002e14 <fabsf>
 8002ddc:	f000 fbd8 	bl	8003590 <__ieee754_expf>
 8002de0:	e7f4      	b.n	8002dcc <__ieee754_sinhf+0x90>
 8002de2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <__ieee754_sinhf+0xd4>)
 8002de4:	429c      	cmp	r4, r3
 8002de6:	d808      	bhi.n	8002dfa <__ieee754_sinhf+0xbe>
 8002de8:	f000 f814 	bl	8002e14 <fabsf>
 8002dec:	ee20 0a28 	vmul.f32	s0, s0, s17
 8002df0:	f000 fbce 	bl	8003590 <__ieee754_expf>
 8002df4:	ee28 8a00 	vmul.f32	s16, s16, s0
 8002df8:	e7e8      	b.n	8002dcc <__ieee754_sinhf+0x90>
 8002dfa:	ed9f 7a03 	vldr	s14, [pc, #12]	@ 8002e08 <__ieee754_sinhf+0xcc>
 8002dfe:	ee60 7a07 	vmul.f32	s15, s0, s14
 8002e02:	e7a9      	b.n	8002d58 <__ieee754_sinhf+0x1c>
 8002e04:	41afffff 	.word	0x41afffff
 8002e08:	7cf0bdc2 	.word	0x7cf0bdc2
 8002e0c:	42b17217 	.word	0x42b17217
 8002e10:	42b2d4fc 	.word	0x42b2d4fc

08002e14 <fabsf>:
 8002e14:	ee10 3a10 	vmov	r3, s0
 8002e18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e1c:	ee00 3a10 	vmov	s0, r3
 8002e20:	4770      	bx	lr
	...

08002e24 <expm1f>:
 8002e24:	ee10 3a10 	vmov	r3, s0
 8002e28:	4a83      	ldr	r2, [pc, #524]	@ (8003038 <expm1f+0x214>)
 8002e2a:	f003 4000 	and.w	r0, r3, #2147483648	@ 0x80000000
 8002e2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d91f      	bls.n	8002e76 <expm1f+0x52>
 8002e36:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8002e3a:	d902      	bls.n	8002e42 <expm1f+0x1e>
 8002e3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002e40:	4770      	bx	lr
 8002e42:	d106      	bne.n	8002e52 <expm1f+0x2e>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8002e4a:	bf18      	it	ne
 8002e4c:	eeb0 0a67 	vmovne.f32	s0, s15
 8002e50:	4770      	bx	lr
 8002e52:	b920      	cbnz	r0, 8002e5e <expm1f+0x3a>
 8002e54:	4a79      	ldr	r2, [pc, #484]	@ (800303c <expm1f+0x218>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d963      	bls.n	8002f22 <expm1f+0xfe>
 8002e5a:	f000 b92b 	b.w	80030b4 <__math_oflowf>
 8002e5e:	eddf 7a78 	vldr	s15, [pc, #480]	@ 8003040 <expm1f+0x21c>
 8002e62:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002e66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e6e:	d551      	bpl.n	8002f14 <expm1f+0xf0>
 8002e70:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8002e74:	4770      	bx	lr
 8002e76:	4a73      	ldr	r2, [pc, #460]	@ (8003044 <expm1f+0x220>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d972      	bls.n	8002f62 <expm1f+0x13e>
 8002e7c:	4a72      	ldr	r2, [pc, #456]	@ (8003048 <expm1f+0x224>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d868      	bhi.n	8002f54 <expm1f+0x130>
 8002e82:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800304c <expm1f+0x228>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d13d      	bne.n	8002f06 <expm1f+0xe2>
 8002e8a:	ee30 7a47 	vsub.f32	s14, s0, s14
 8002e8e:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8003050 <expm1f+0x22c>
 8002e92:	2301      	movs	r3, #1
 8002e94:	ee37 0a66 	vsub.f32	s0, s14, s13
 8002e98:	ee77 7a40 	vsub.f32	s15, s14, s0
 8002e9c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002ea0:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8002ea4:	ee20 4a25 	vmul.f32	s8, s0, s11
 8002ea8:	ed9f 6a6a 	vldr	s12, [pc, #424]	@ 8003054 <expm1f+0x230>
 8002eac:	eddf 6a6a 	vldr	s13, [pc, #424]	@ 8003058 <expm1f+0x234>
 8002eb0:	ed9f 5a6a 	vldr	s10, [pc, #424]	@ 800305c <expm1f+0x238>
 8002eb4:	ee20 7a04 	vmul.f32	s14, s0, s8
 8002eb8:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
 8002ebc:	eee7 6a06 	vfma.f32	s13, s14, s12
 8002ec0:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 8003060 <expm1f+0x23c>
 8002ec4:	eea6 6a87 	vfma.f32	s12, s13, s14
 8002ec8:	eddf 6a66 	vldr	s13, [pc, #408]	@ 8003064 <expm1f+0x240>
 8002ecc:	eee6 6a07 	vfma.f32	s13, s12, s14
 8002ed0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8002ed4:	eea6 5a87 	vfma.f32	s10, s13, s14
 8002ed8:	eef0 6a46 	vmov.f32	s13, s12
 8002edc:	eee5 6a07 	vfma.f32	s13, s10, s14
 8002ee0:	eee4 4a66 	vfms.f32	s9, s8, s13
 8002ee4:	eeb1 4a08 	vmov.f32	s8, #24	@ 0x40c00000  6.0
 8002ee8:	eea0 4a64 	vfms.f32	s8, s0, s9
 8002eec:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8002ef0:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8002ef4:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d140      	bne.n	8002f7e <expm1f+0x15a>
 8002efc:	ee90 7a26 	vfnms.f32	s14, s0, s13
 8002f00:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002f04:	4770      	bx	lr
 8002f06:	ee30 7a07 	vadd.f32	s14, s0, s14
 8002f0a:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8003068 <expm1f+0x244>
 8002f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f12:	e7bf      	b.n	8002e94 <expm1f+0x70>
 8002f14:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800306c <expm1f+0x248>
 8002f18:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002f1c:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 8002f20:	e005      	b.n	8002f2e <expm1f+0x10a>
 8002f22:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800306c <expm1f+0x248>
 8002f26:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002f2a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002f2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f32:	eeb0 7a40 	vmov.f32	s14, s0
 8002f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f3e:	ee17 3a90 	vmov	r3, s15
 8002f42:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800304c <expm1f+0x228>
 8002f46:	eea6 7ae7 	vfms.f32	s14, s13, s15
 8002f4a:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8003050 <expm1f+0x22c>
 8002f4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002f52:	e79f      	b.n	8002e94 <expm1f+0x70>
 8002f54:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800306c <expm1f+0x248>
 8002f58:	ee20 7a07 	vmul.f32	s14, s0, s14
 8002f5c:	2800      	cmp	r0, #0
 8002f5e:	d0e4      	beq.n	8002f2a <expm1f+0x106>
 8002f60:	e7dc      	b.n	8002f1c <expm1f+0xf8>
 8002f62:	f1b3 5f4c 	cmp.w	r3, #855638016	@ 0x33000000
 8002f66:	d208      	bcs.n	8002f7a <expm1f+0x156>
 8002f68:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8003070 <expm1f+0x24c>
 8002f6c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8002f70:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8002f74:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002f78:	4770      	bx	lr
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	e790      	b.n	8002ea0 <expm1f+0x7c>
 8002f7e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8002f88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f8c:	d106      	bne.n	8002f9c <expm1f+0x178>
 8002f8e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8002f92:	eebe 0a00 	vmov.f32	s0, #224	@ 0xbf000000 -0.5
 8002f96:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8002f9a:	4770      	bx	lr
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d118      	bne.n	8002fd2 <expm1f+0x1ae>
 8002fa0:	eebd 7a00 	vmov.f32	s14, #208	@ 0xbe800000 -0.250
 8002fa4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8002fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fac:	bf5b      	ittet	pl
 8002fae:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 8002fb2:	eeb0 7a00 	vmovpl.f32	s14, #0	@ 0x40000000  2.0
 8002fb6:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8002fba:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8002fbe:	bf43      	ittte	mi
 8002fc0:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 8002fc4:	eeb8 0a00 	vmovmi.f32	s0, #128	@ 0xc0000000 -2.0
 8002fc8:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8002fcc:	eeb0 0a46 	vmovpl.f32	s0, s12
 8002fd0:	4770      	bx	lr
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	2a39      	cmp	r2, #57	@ 0x39
 8002fd6:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8002fda:	d90b      	bls.n	8002ff4 <expm1f+0x1d0>
 8002fdc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002fe0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002fe4:	ee17 3a90 	vmov	r3, s15
 8002fe8:	4419      	add	r1, r3
 8002fea:	ee07 1a90 	vmov	s15, r1
 8002fee:	ee37 0ac6 	vsub.f32	s0, s15, s12
 8002ff2:	4770      	bx	lr
 8002ff4:	2b16      	cmp	r3, #22
 8002ff6:	dc11      	bgt.n	800301c <expm1f+0x1f8>
 8002ff8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ffc:	fa42 f303 	asr.w	r3, r2, r3
 8003000:	f1c3 537e 	rsb	r3, r3, #1065353216	@ 0x3f800000
 8003004:	ee07 3a10 	vmov	s14, r3
 8003008:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800300c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003010:	ee17 3a90 	vmov	r3, s15
 8003014:	440b      	add	r3, r1
 8003016:	ee00 3a10 	vmov	s0, r3
 800301a:	4770      	bx	lr
 800301c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8003020:	05db      	lsls	r3, r3, #23
 8003022:	ee07 3a10 	vmov	s14, r3
 8003026:	ee77 7a87 	vadd.f32	s15, s15, s14
 800302a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800302e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003032:	ee17 3a90 	vmov	r3, s15
 8003036:	e7ed      	b.n	8003014 <expm1f+0x1f0>
 8003038:	4195b843 	.word	0x4195b843
 800303c:	42b17217 	.word	0x42b17217
 8003040:	0da24260 	.word	0x0da24260
 8003044:	3eb17218 	.word	0x3eb17218
 8003048:	3f851591 	.word	0x3f851591
 800304c:	3f317180 	.word	0x3f317180
 8003050:	3717f7d1 	.word	0x3717f7d1
 8003054:	b457edbb 	.word	0xb457edbb
 8003058:	36867e54 	.word	0x36867e54
 800305c:	bd088889 	.word	0xbd088889
 8003060:	b8a670cd 	.word	0xb8a670cd
 8003064:	3ad00d01 	.word	0x3ad00d01
 8003068:	b717f7d1 	.word	0xb717f7d1
 800306c:	3fb8aa3b 	.word	0x3fb8aa3b
 8003070:	7149f2ca 	.word	0x7149f2ca

08003074 <with_errnof>:
 8003074:	b510      	push	{r4, lr}
 8003076:	ed2d 8b02 	vpush	{d8}
 800307a:	eeb0 8a40 	vmov.f32	s16, s0
 800307e:	4604      	mov	r4, r0
 8003080:	f7ff fba2 	bl	80027c8 <__errno>
 8003084:	eeb0 0a48 	vmov.f32	s0, s16
 8003088:	ecbd 8b02 	vpop	{d8}
 800308c:	6004      	str	r4, [r0, #0]
 800308e:	bd10      	pop	{r4, pc}

08003090 <xflowf>:
 8003090:	b130      	cbz	r0, 80030a0 <xflowf+0x10>
 8003092:	eef1 7a40 	vneg.f32	s15, s0
 8003096:	ee27 0a80 	vmul.f32	s0, s15, s0
 800309a:	2022      	movs	r0, #34	@ 0x22
 800309c:	f7ff bfea 	b.w	8003074 <with_errnof>
 80030a0:	eef0 7a40 	vmov.f32	s15, s0
 80030a4:	e7f7      	b.n	8003096 <xflowf+0x6>
	...

080030a8 <__math_uflowf>:
 80030a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80030b0 <__math_uflowf+0x8>
 80030ac:	f7ff bff0 	b.w	8003090 <xflowf>
 80030b0:	10000000 	.word	0x10000000

080030b4 <__math_oflowf>:
 80030b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80030bc <__math_oflowf+0x8>
 80030b8:	f7ff bfea 	b.w	8003090 <xflowf>
 80030bc:	70000000 	.word	0x70000000

080030c0 <__kernel_rem_pio2f>:
 80030c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c4:	ed2d 8b04 	vpush	{d8-d9}
 80030c8:	b0d9      	sub	sp, #356	@ 0x164
 80030ca:	4690      	mov	r8, r2
 80030cc:	9001      	str	r0, [sp, #4]
 80030ce:	4ab6      	ldr	r2, [pc, #728]	@ (80033a8 <__kernel_rem_pio2f+0x2e8>)
 80030d0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80030d2:	f118 0f04 	cmn.w	r8, #4
 80030d6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80030da:	460f      	mov	r7, r1
 80030dc:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80030e0:	db26      	blt.n	8003130 <__kernel_rem_pio2f+0x70>
 80030e2:	f1b8 0203 	subs.w	r2, r8, #3
 80030e6:	bf48      	it	mi
 80030e8:	f108 0204 	addmi.w	r2, r8, #4
 80030ec:	10d2      	asrs	r2, r2, #3
 80030ee:	1c55      	adds	r5, r2, #1
 80030f0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80030f2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80033b8 <__kernel_rem_pio2f+0x2f8>
 80030f6:	00e8      	lsls	r0, r5, #3
 80030f8:	eba2 060b 	sub.w	r6, r2, fp
 80030fc:	9002      	str	r0, [sp, #8]
 80030fe:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8003102:	eb0a 0c0b 	add.w	ip, sl, fp
 8003106:	ac1c      	add	r4, sp, #112	@ 0x70
 8003108:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800310c:	2000      	movs	r0, #0
 800310e:	4560      	cmp	r0, ip
 8003110:	dd10      	ble.n	8003134 <__kernel_rem_pio2f+0x74>
 8003112:	a91c      	add	r1, sp, #112	@ 0x70
 8003114:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8003118:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800311c:	2600      	movs	r6, #0
 800311e:	4556      	cmp	r6, sl
 8003120:	dc24      	bgt.n	800316c <__kernel_rem_pio2f+0xac>
 8003122:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003126:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80033b8 <__kernel_rem_pio2f+0x2f8>
 800312a:	4684      	mov	ip, r0
 800312c:	2400      	movs	r4, #0
 800312e:	e016      	b.n	800315e <__kernel_rem_pio2f+0x9e>
 8003130:	2200      	movs	r2, #0
 8003132:	e7dc      	b.n	80030ee <__kernel_rem_pio2f+0x2e>
 8003134:	42c6      	cmn	r6, r0
 8003136:	bf5d      	ittte	pl
 8003138:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800313c:	ee07 1a90 	vmovpl	s15, r1
 8003140:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8003144:	eef0 7a47 	vmovmi.f32	s15, s14
 8003148:	ece4 7a01 	vstmia	r4!, {s15}
 800314c:	3001      	adds	r0, #1
 800314e:	e7de      	b.n	800310e <__kernel_rem_pio2f+0x4e>
 8003150:	ecfe 6a01 	vldmia	lr!, {s13}
 8003154:	ed3c 7a01 	vldmdb	ip!, {s14}
 8003158:	eee6 7a87 	vfma.f32	s15, s13, s14
 800315c:	3401      	adds	r4, #1
 800315e:	455c      	cmp	r4, fp
 8003160:	ddf6      	ble.n	8003150 <__kernel_rem_pio2f+0x90>
 8003162:	ece9 7a01 	vstmia	r9!, {s15}
 8003166:	3601      	adds	r6, #1
 8003168:	3004      	adds	r0, #4
 800316a:	e7d8      	b.n	800311e <__kernel_rem_pio2f+0x5e>
 800316c:	a908      	add	r1, sp, #32
 800316e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003172:	9104      	str	r1, [sp, #16]
 8003174:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8003176:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80033b4 <__kernel_rem_pio2f+0x2f4>
 800317a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80033b0 <__kernel_rem_pio2f+0x2f0>
 800317e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8003182:	9203      	str	r2, [sp, #12]
 8003184:	4654      	mov	r4, sl
 8003186:	00a2      	lsls	r2, r4, #2
 8003188:	9205      	str	r2, [sp, #20]
 800318a:	aa58      	add	r2, sp, #352	@ 0x160
 800318c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003190:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8003194:	a944      	add	r1, sp, #272	@ 0x110
 8003196:	aa08      	add	r2, sp, #32
 8003198:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800319c:	4694      	mov	ip, r2
 800319e:	4626      	mov	r6, r4
 80031a0:	2e00      	cmp	r6, #0
 80031a2:	dc4c      	bgt.n	800323e <__kernel_rem_pio2f+0x17e>
 80031a4:	4628      	mov	r0, r5
 80031a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80031aa:	f000 fabf 	bl	800372c <scalbnf>
 80031ae:	eeb0 8a40 	vmov.f32	s16, s0
 80031b2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80031b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80031ba:	f000 fb1d 	bl	80037f8 <floorf>
 80031be:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80031c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80031c6:	2d00      	cmp	r5, #0
 80031c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80031cc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80031d0:	ee17 9a90 	vmov	r9, s15
 80031d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031d8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80031dc:	dd41      	ble.n	8003262 <__kernel_rem_pio2f+0x1a2>
 80031de:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80031e2:	a908      	add	r1, sp, #32
 80031e4:	f1c5 0e08 	rsb	lr, r5, #8
 80031e8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80031ec:	fa46 f00e 	asr.w	r0, r6, lr
 80031f0:	4481      	add	r9, r0
 80031f2:	fa00 f00e 	lsl.w	r0, r0, lr
 80031f6:	1a36      	subs	r6, r6, r0
 80031f8:	f1c5 0007 	rsb	r0, r5, #7
 80031fc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8003200:	4106      	asrs	r6, r0
 8003202:	2e00      	cmp	r6, #0
 8003204:	dd3c      	ble.n	8003280 <__kernel_rem_pio2f+0x1c0>
 8003206:	f04f 0e00 	mov.w	lr, #0
 800320a:	f109 0901 	add.w	r9, r9, #1
 800320e:	4670      	mov	r0, lr
 8003210:	4574      	cmp	r4, lr
 8003212:	dc68      	bgt.n	80032e6 <__kernel_rem_pio2f+0x226>
 8003214:	2d00      	cmp	r5, #0
 8003216:	dd03      	ble.n	8003220 <__kernel_rem_pio2f+0x160>
 8003218:	2d01      	cmp	r5, #1
 800321a:	d074      	beq.n	8003306 <__kernel_rem_pio2f+0x246>
 800321c:	2d02      	cmp	r5, #2
 800321e:	d07d      	beq.n	800331c <__kernel_rem_pio2f+0x25c>
 8003220:	2e02      	cmp	r6, #2
 8003222:	d12d      	bne.n	8003280 <__kernel_rem_pio2f+0x1c0>
 8003224:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003228:	ee30 8a48 	vsub.f32	s16, s0, s16
 800322c:	b340      	cbz	r0, 8003280 <__kernel_rem_pio2f+0x1c0>
 800322e:	4628      	mov	r0, r5
 8003230:	9306      	str	r3, [sp, #24]
 8003232:	f000 fa7b 	bl	800372c <scalbnf>
 8003236:	9b06      	ldr	r3, [sp, #24]
 8003238:	ee38 8a40 	vsub.f32	s16, s16, s0
 800323c:	e020      	b.n	8003280 <__kernel_rem_pio2f+0x1c0>
 800323e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8003242:	3e01      	subs	r6, #1
 8003244:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800324c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8003250:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003254:	ecac 0a01 	vstmia	ip!, {s0}
 8003258:	ed30 0a01 	vldmdb	r0!, {s0}
 800325c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8003260:	e79e      	b.n	80031a0 <__kernel_rem_pio2f+0xe0>
 8003262:	d105      	bne.n	8003270 <__kernel_rem_pio2f+0x1b0>
 8003264:	1e60      	subs	r0, r4, #1
 8003266:	a908      	add	r1, sp, #32
 8003268:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800326c:	11f6      	asrs	r6, r6, #7
 800326e:	e7c8      	b.n	8003202 <__kernel_rem_pio2f+0x142>
 8003270:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003274:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	da31      	bge.n	80032e2 <__kernel_rem_pio2f+0x222>
 800327e:	2600      	movs	r6, #0
 8003280:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8003284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003288:	f040 8098 	bne.w	80033bc <__kernel_rem_pio2f+0x2fc>
 800328c:	1e60      	subs	r0, r4, #1
 800328e:	2200      	movs	r2, #0
 8003290:	4550      	cmp	r0, sl
 8003292:	da4b      	bge.n	800332c <__kernel_rem_pio2f+0x26c>
 8003294:	2a00      	cmp	r2, #0
 8003296:	d065      	beq.n	8003364 <__kernel_rem_pio2f+0x2a4>
 8003298:	3c01      	subs	r4, #1
 800329a:	ab08      	add	r3, sp, #32
 800329c:	3d08      	subs	r5, #8
 800329e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f8      	beq.n	8003298 <__kernel_rem_pio2f+0x1d8>
 80032a6:	4628      	mov	r0, r5
 80032a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80032ac:	f000 fa3e 	bl	800372c <scalbnf>
 80032b0:	1c63      	adds	r3, r4, #1
 80032b2:	aa44      	add	r2, sp, #272	@ 0x110
 80032b4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80033b4 <__kernel_rem_pio2f+0x2f4>
 80032b8:	0099      	lsls	r1, r3, #2
 80032ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80032be:	4623      	mov	r3, r4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f280 80a9 	bge.w	8003418 <__kernel_rem_pio2f+0x358>
 80032c6:	4623      	mov	r3, r4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f2c0 80c7 	blt.w	800345c <__kernel_rem_pio2f+0x39c>
 80032ce:	aa44      	add	r2, sp, #272	@ 0x110
 80032d0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80032d4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80033ac <__kernel_rem_pio2f+0x2ec>
 80032d8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80033b8 <__kernel_rem_pio2f+0x2f8>
 80032dc:	2000      	movs	r0, #0
 80032de:	1ae2      	subs	r2, r4, r3
 80032e0:	e0b1      	b.n	8003446 <__kernel_rem_pio2f+0x386>
 80032e2:	2602      	movs	r6, #2
 80032e4:	e78f      	b.n	8003206 <__kernel_rem_pio2f+0x146>
 80032e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80032ea:	b948      	cbnz	r0, 8003300 <__kernel_rem_pio2f+0x240>
 80032ec:	b121      	cbz	r1, 80032f8 <__kernel_rem_pio2f+0x238>
 80032ee:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80032f2:	f842 1c04 	str.w	r1, [r2, #-4]
 80032f6:	2101      	movs	r1, #1
 80032f8:	f10e 0e01 	add.w	lr, lr, #1
 80032fc:	4608      	mov	r0, r1
 80032fe:	e787      	b.n	8003210 <__kernel_rem_pio2f+0x150>
 8003300:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8003304:	e7f5      	b.n	80032f2 <__kernel_rem_pio2f+0x232>
 8003306:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800330a:	aa08      	add	r2, sp, #32
 800330c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8003310:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003314:	a908      	add	r1, sp, #32
 8003316:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800331a:	e781      	b.n	8003220 <__kernel_rem_pio2f+0x160>
 800331c:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8003320:	aa08      	add	r2, sp, #32
 8003322:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8003326:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800332a:	e7f3      	b.n	8003314 <__kernel_rem_pio2f+0x254>
 800332c:	a908      	add	r1, sp, #32
 800332e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003332:	3801      	subs	r0, #1
 8003334:	430a      	orrs	r2, r1
 8003336:	e7ab      	b.n	8003290 <__kernel_rem_pio2f+0x1d0>
 8003338:	3201      	adds	r2, #1
 800333a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800333e:	2e00      	cmp	r6, #0
 8003340:	d0fa      	beq.n	8003338 <__kernel_rem_pio2f+0x278>
 8003342:	9905      	ldr	r1, [sp, #20]
 8003344:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8003348:	eb0d 0001 	add.w	r0, sp, r1
 800334c:	18e6      	adds	r6, r4, r3
 800334e:	a91c      	add	r1, sp, #112	@ 0x70
 8003350:	f104 0c01 	add.w	ip, r4, #1
 8003354:	384c      	subs	r0, #76	@ 0x4c
 8003356:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800335a:	4422      	add	r2, r4
 800335c:	4562      	cmp	r2, ip
 800335e:	da04      	bge.n	800336a <__kernel_rem_pio2f+0x2aa>
 8003360:	4614      	mov	r4, r2
 8003362:	e710      	b.n	8003186 <__kernel_rem_pio2f+0xc6>
 8003364:	9804      	ldr	r0, [sp, #16]
 8003366:	2201      	movs	r2, #1
 8003368:	e7e7      	b.n	800333a <__kernel_rem_pio2f+0x27a>
 800336a:	9903      	ldr	r1, [sp, #12]
 800336c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8003370:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8003374:	9105      	str	r1, [sp, #20]
 8003376:	ee07 1a90 	vmov	s15, r1
 800337a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800337e:	2400      	movs	r4, #0
 8003380:	ece6 7a01 	vstmia	r6!, {s15}
 8003384:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80033b8 <__kernel_rem_pio2f+0x2f8>
 8003388:	46b1      	mov	r9, r6
 800338a:	455c      	cmp	r4, fp
 800338c:	dd04      	ble.n	8003398 <__kernel_rem_pio2f+0x2d8>
 800338e:	ece0 7a01 	vstmia	r0!, {s15}
 8003392:	f10c 0c01 	add.w	ip, ip, #1
 8003396:	e7e1      	b.n	800335c <__kernel_rem_pio2f+0x29c>
 8003398:	ecfe 6a01 	vldmia	lr!, {s13}
 800339c:	ed39 7a01 	vldmdb	r9!, {s14}
 80033a0:	3401      	adds	r4, #1
 80033a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80033a6:	e7f0      	b.n	800338a <__kernel_rem_pio2f+0x2ca>
 80033a8:	08003c9c 	.word	0x08003c9c
 80033ac:	08003c70 	.word	0x08003c70
 80033b0:	43800000 	.word	0x43800000
 80033b4:	3b800000 	.word	0x3b800000
 80033b8:	00000000 	.word	0x00000000
 80033bc:	9b02      	ldr	r3, [sp, #8]
 80033be:	eeb0 0a48 	vmov.f32	s0, s16
 80033c2:	eba3 0008 	sub.w	r0, r3, r8
 80033c6:	f000 f9b1 	bl	800372c <scalbnf>
 80033ca:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80033b0 <__kernel_rem_pio2f+0x2f0>
 80033ce:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	db19      	blt.n	800340c <__kernel_rem_pio2f+0x34c>
 80033d8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80033b4 <__kernel_rem_pio2f+0x2f4>
 80033dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80033e0:	aa08      	add	r2, sp, #32
 80033e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033e6:	3508      	adds	r5, #8
 80033e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033ec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80033f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80033f8:	ee10 3a10 	vmov	r3, s0
 80033fc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8003400:	ee17 3a90 	vmov	r3, s15
 8003404:	3401      	adds	r4, #1
 8003406:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800340a:	e74c      	b.n	80032a6 <__kernel_rem_pio2f+0x1e6>
 800340c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8003410:	aa08      	add	r2, sp, #32
 8003412:	ee10 3a10 	vmov	r3, s0
 8003416:	e7f6      	b.n	8003406 <__kernel_rem_pio2f+0x346>
 8003418:	a808      	add	r0, sp, #32
 800341a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800341e:	9001      	str	r0, [sp, #4]
 8003420:	ee07 0a90 	vmov	s15, r0
 8003424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003428:	3b01      	subs	r3, #1
 800342a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800342e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8003432:	ed62 7a01 	vstmdb	r2!, {s15}
 8003436:	e743      	b.n	80032c0 <__kernel_rem_pio2f+0x200>
 8003438:	ecfc 6a01 	vldmia	ip!, {s13}
 800343c:	ecb5 7a01 	vldmia	r5!, {s14}
 8003440:	eee6 7a87 	vfma.f32	s15, s13, s14
 8003444:	3001      	adds	r0, #1
 8003446:	4550      	cmp	r0, sl
 8003448:	dc01      	bgt.n	800344e <__kernel_rem_pio2f+0x38e>
 800344a:	4290      	cmp	r0, r2
 800344c:	ddf4      	ble.n	8003438 <__kernel_rem_pio2f+0x378>
 800344e:	a858      	add	r0, sp, #352	@ 0x160
 8003450:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003454:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8003458:	3b01      	subs	r3, #1
 800345a:	e735      	b.n	80032c8 <__kernel_rem_pio2f+0x208>
 800345c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800345e:	2b02      	cmp	r3, #2
 8003460:	dc09      	bgt.n	8003476 <__kernel_rem_pio2f+0x3b6>
 8003462:	2b00      	cmp	r3, #0
 8003464:	dc27      	bgt.n	80034b6 <__kernel_rem_pio2f+0x3f6>
 8003466:	d040      	beq.n	80034ea <__kernel_rem_pio2f+0x42a>
 8003468:	f009 0007 	and.w	r0, r9, #7
 800346c:	b059      	add	sp, #356	@ 0x164
 800346e:	ecbd 8b04 	vpop	{d8-d9}
 8003472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003476:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8003478:	2b03      	cmp	r3, #3
 800347a:	d1f5      	bne.n	8003468 <__kernel_rem_pio2f+0x3a8>
 800347c:	aa30      	add	r2, sp, #192	@ 0xc0
 800347e:	1f0b      	subs	r3, r1, #4
 8003480:	4413      	add	r3, r2
 8003482:	461a      	mov	r2, r3
 8003484:	4620      	mov	r0, r4
 8003486:	2800      	cmp	r0, #0
 8003488:	dc50      	bgt.n	800352c <__kernel_rem_pio2f+0x46c>
 800348a:	4622      	mov	r2, r4
 800348c:	2a01      	cmp	r2, #1
 800348e:	dc5d      	bgt.n	800354c <__kernel_rem_pio2f+0x48c>
 8003490:	ab30      	add	r3, sp, #192	@ 0xc0
 8003492:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80033b8 <__kernel_rem_pio2f+0x2f8>
 8003496:	440b      	add	r3, r1
 8003498:	2c01      	cmp	r4, #1
 800349a:	dc67      	bgt.n	800356c <__kernel_rem_pio2f+0x4ac>
 800349c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80034a0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80034a4:	2e00      	cmp	r6, #0
 80034a6:	d167      	bne.n	8003578 <__kernel_rem_pio2f+0x4b8>
 80034a8:	edc7 6a00 	vstr	s13, [r7]
 80034ac:	ed87 7a01 	vstr	s14, [r7, #4]
 80034b0:	edc7 7a02 	vstr	s15, [r7, #8]
 80034b4:	e7d8      	b.n	8003468 <__kernel_rem_pio2f+0x3a8>
 80034b6:	ab30      	add	r3, sp, #192	@ 0xc0
 80034b8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80033b8 <__kernel_rem_pio2f+0x2f8>
 80034bc:	440b      	add	r3, r1
 80034be:	4622      	mov	r2, r4
 80034c0:	2a00      	cmp	r2, #0
 80034c2:	da24      	bge.n	800350e <__kernel_rem_pio2f+0x44e>
 80034c4:	b34e      	cbz	r6, 800351a <__kernel_rem_pio2f+0x45a>
 80034c6:	eef1 7a47 	vneg.f32	s15, s14
 80034ca:	edc7 7a00 	vstr	s15, [r7]
 80034ce:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80034d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034d6:	aa31      	add	r2, sp, #196	@ 0xc4
 80034d8:	2301      	movs	r3, #1
 80034da:	429c      	cmp	r4, r3
 80034dc:	da20      	bge.n	8003520 <__kernel_rem_pio2f+0x460>
 80034de:	b10e      	cbz	r6, 80034e4 <__kernel_rem_pio2f+0x424>
 80034e0:	eef1 7a67 	vneg.f32	s15, s15
 80034e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80034e8:	e7be      	b.n	8003468 <__kernel_rem_pio2f+0x3a8>
 80034ea:	ab30      	add	r3, sp, #192	@ 0xc0
 80034ec:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80033b8 <__kernel_rem_pio2f+0x2f8>
 80034f0:	440b      	add	r3, r1
 80034f2:	2c00      	cmp	r4, #0
 80034f4:	da05      	bge.n	8003502 <__kernel_rem_pio2f+0x442>
 80034f6:	b10e      	cbz	r6, 80034fc <__kernel_rem_pio2f+0x43c>
 80034f8:	eef1 7a67 	vneg.f32	s15, s15
 80034fc:	edc7 7a00 	vstr	s15, [r7]
 8003500:	e7b2      	b.n	8003468 <__kernel_rem_pio2f+0x3a8>
 8003502:	ed33 7a01 	vldmdb	r3!, {s14}
 8003506:	3c01      	subs	r4, #1
 8003508:	ee77 7a87 	vadd.f32	s15, s15, s14
 800350c:	e7f1      	b.n	80034f2 <__kernel_rem_pio2f+0x432>
 800350e:	ed73 7a01 	vldmdb	r3!, {s15}
 8003512:	3a01      	subs	r2, #1
 8003514:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003518:	e7d2      	b.n	80034c0 <__kernel_rem_pio2f+0x400>
 800351a:	eef0 7a47 	vmov.f32	s15, s14
 800351e:	e7d4      	b.n	80034ca <__kernel_rem_pio2f+0x40a>
 8003520:	ecb2 7a01 	vldmia	r2!, {s14}
 8003524:	3301      	adds	r3, #1
 8003526:	ee77 7a87 	vadd.f32	s15, s15, s14
 800352a:	e7d6      	b.n	80034da <__kernel_rem_pio2f+0x41a>
 800352c:	ed72 7a01 	vldmdb	r2!, {s15}
 8003530:	edd2 6a01 	vldr	s13, [r2, #4]
 8003534:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003538:	3801      	subs	r0, #1
 800353a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800353e:	ed82 7a00 	vstr	s14, [r2]
 8003542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003546:	edc2 7a01 	vstr	s15, [r2, #4]
 800354a:	e79c      	b.n	8003486 <__kernel_rem_pio2f+0x3c6>
 800354c:	ed73 7a01 	vldmdb	r3!, {s15}
 8003550:	edd3 6a01 	vldr	s13, [r3, #4]
 8003554:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003558:	3a01      	subs	r2, #1
 800355a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800355e:	ed83 7a00 	vstr	s14, [r3]
 8003562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003566:	edc3 7a01 	vstr	s15, [r3, #4]
 800356a:	e78f      	b.n	800348c <__kernel_rem_pio2f+0x3cc>
 800356c:	ed33 7a01 	vldmdb	r3!, {s14}
 8003570:	3c01      	subs	r4, #1
 8003572:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003576:	e78f      	b.n	8003498 <__kernel_rem_pio2f+0x3d8>
 8003578:	eef1 6a66 	vneg.f32	s13, s13
 800357c:	eeb1 7a47 	vneg.f32	s14, s14
 8003580:	edc7 6a00 	vstr	s13, [r7]
 8003584:	ed87 7a01 	vstr	s14, [r7, #4]
 8003588:	eef1 7a67 	vneg.f32	s15, s15
 800358c:	e790      	b.n	80034b0 <__kernel_rem_pio2f+0x3f0>
 800358e:	bf00      	nop

08003590 <__ieee754_expf>:
 8003590:	ee10 2a10 	vmov	r2, s0
 8003594:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8003598:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800359c:	d902      	bls.n	80035a4 <__ieee754_expf+0x14>
 800359e:	ee30 0a00 	vadd.f32	s0, s0, s0
 80035a2:	4770      	bx	lr
 80035a4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80035a8:	d106      	bne.n	80035b8 <__ieee754_expf+0x28>
 80035aa:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80036e4 <__ieee754_expf+0x154>
 80035ae:	2900      	cmp	r1, #0
 80035b0:	bf18      	it	ne
 80035b2:	eeb0 0a67 	vmovne.f32	s0, s15
 80035b6:	4770      	bx	lr
 80035b8:	484b      	ldr	r0, [pc, #300]	@ (80036e8 <__ieee754_expf+0x158>)
 80035ba:	4282      	cmp	r2, r0
 80035bc:	dd02      	ble.n	80035c4 <__ieee754_expf+0x34>
 80035be:	2000      	movs	r0, #0
 80035c0:	f7ff bd78 	b.w	80030b4 <__math_oflowf>
 80035c4:	2a00      	cmp	r2, #0
 80035c6:	da05      	bge.n	80035d4 <__ieee754_expf+0x44>
 80035c8:	4a48      	ldr	r2, [pc, #288]	@ (80036ec <__ieee754_expf+0x15c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d902      	bls.n	80035d4 <__ieee754_expf+0x44>
 80035ce:	2000      	movs	r0, #0
 80035d0:	f7ff bd6a 	b.w	80030a8 <__math_uflowf>
 80035d4:	4a46      	ldr	r2, [pc, #280]	@ (80036f0 <__ieee754_expf+0x160>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80035dc:	d952      	bls.n	8003684 <__ieee754_expf+0xf4>
 80035de:	4a45      	ldr	r2, [pc, #276]	@ (80036f4 <__ieee754_expf+0x164>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80035e6:	d834      	bhi.n	8003652 <__ieee754_expf+0xc2>
 80035e8:	4b43      	ldr	r3, [pc, #268]	@ (80036f8 <__ieee754_expf+0x168>)
 80035ea:	4413      	add	r3, r2
 80035ec:	ed93 7a00 	vldr	s14, [r3]
 80035f0:	4b42      	ldr	r3, [pc, #264]	@ (80036fc <__ieee754_expf+0x16c>)
 80035f2:	4413      	add	r3, r2
 80035f4:	ee30 7a47 	vsub.f32	s14, s0, s14
 80035f8:	f081 0201 	eor.w	r2, r1, #1
 80035fc:	edd3 7a00 	vldr	s15, [r3]
 8003600:	1a52      	subs	r2, r2, r1
 8003602:	ee37 0a67 	vsub.f32	s0, s14, s15
 8003606:	ee20 6a00 	vmul.f32	s12, s0, s0
 800360a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8003700 <__ieee754_expf+0x170>
 800360e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003704 <__ieee754_expf+0x174>
 8003612:	eee6 6a05 	vfma.f32	s13, s12, s10
 8003616:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8003708 <__ieee754_expf+0x178>
 800361a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800361e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800370c <__ieee754_expf+0x17c>
 8003622:	eee5 6a06 	vfma.f32	s13, s10, s12
 8003626:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8003710 <__ieee754_expf+0x180>
 800362a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800362e:	eef0 6a40 	vmov.f32	s13, s0
 8003632:	eee5 6a46 	vfms.f32	s13, s10, s12
 8003636:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800363a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800363e:	bb92      	cbnz	r2, 80036a6 <__ieee754_expf+0x116>
 8003640:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8003644:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8003648:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800364c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8003650:	4770      	bx	lr
 8003652:	4b30      	ldr	r3, [pc, #192]	@ (8003714 <__ieee754_expf+0x184>)
 8003654:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003718 <__ieee754_expf+0x188>
 8003658:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800371c <__ieee754_expf+0x18c>
 800365c:	4413      	add	r3, r2
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003666:	eeb0 7a40 	vmov.f32	s14, s0
 800366a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800366e:	ee17 2a90 	vmov	r2, s15
 8003672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003676:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800367a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003720 <__ieee754_expf+0x190>
 800367e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003682:	e7be      	b.n	8003602 <__ieee754_expf+0x72>
 8003684:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8003688:	d20b      	bcs.n	80036a2 <__ieee754_expf+0x112>
 800368a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003724 <__ieee754_expf+0x194>
 800368e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8003692:	eef4 6ae5 	vcmpe.f32	s13, s11
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	dd02      	ble.n	80036a2 <__ieee754_expf+0x112>
 800369c:	ee30 0a25 	vadd.f32	s0, s0, s11
 80036a0:	4770      	bx	lr
 80036a2:	2200      	movs	r2, #0
 80036a4:	e7af      	b.n	8003606 <__ieee754_expf+0x76>
 80036a6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80036aa:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 80036ae:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80036b2:	bfb8      	it	lt
 80036b4:	3264      	addlt	r2, #100	@ 0x64
 80036b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80036ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036be:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80036c2:	ee17 3a90 	vmov	r3, s15
 80036c6:	bfab      	itete	ge
 80036c8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80036cc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80036d0:	ee00 3a10 	vmovge	s0, r3
 80036d4:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8003728 <__ieee754_expf+0x198>
 80036d8:	bfbc      	itt	lt
 80036da:	ee00 3a10 	vmovlt	s0, r3
 80036de:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80036e2:	4770      	bx	lr
 80036e4:	00000000 	.word	0x00000000
 80036e8:	42b17217 	.word	0x42b17217
 80036ec:	42cff1b5 	.word	0x42cff1b5
 80036f0:	3eb17218 	.word	0x3eb17218
 80036f4:	3f851591 	.word	0x3f851591
 80036f8:	08003cb0 	.word	0x08003cb0
 80036fc:	08003ca8 	.word	0x08003ca8
 8003700:	3331bb4c 	.word	0x3331bb4c
 8003704:	b5ddea0e 	.word	0xb5ddea0e
 8003708:	388ab355 	.word	0x388ab355
 800370c:	bb360b61 	.word	0xbb360b61
 8003710:	3e2aaaab 	.word	0x3e2aaaab
 8003714:	08003cb8 	.word	0x08003cb8
 8003718:	3fb8aa3b 	.word	0x3fb8aa3b
 800371c:	3f317180 	.word	0x3f317180
 8003720:	3717f7d1 	.word	0x3717f7d1
 8003724:	7149f2ca 	.word	0x7149f2ca
 8003728:	0d800000 	.word	0x0d800000

0800372c <scalbnf>:
 800372c:	ee10 3a10 	vmov	r3, s0
 8003730:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8003734:	d02b      	beq.n	800378e <scalbnf+0x62>
 8003736:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800373a:	d302      	bcc.n	8003742 <scalbnf+0x16>
 800373c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003740:	4770      	bx	lr
 8003742:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8003746:	d123      	bne.n	8003790 <scalbnf+0x64>
 8003748:	4b24      	ldr	r3, [pc, #144]	@ (80037dc <scalbnf+0xb0>)
 800374a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80037e0 <scalbnf+0xb4>
 800374e:	4298      	cmp	r0, r3
 8003750:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003754:	db17      	blt.n	8003786 <scalbnf+0x5a>
 8003756:	ee10 3a10 	vmov	r3, s0
 800375a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800375e:	3a19      	subs	r2, #25
 8003760:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003764:	4288      	cmp	r0, r1
 8003766:	dd15      	ble.n	8003794 <scalbnf+0x68>
 8003768:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80037e4 <scalbnf+0xb8>
 800376c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80037e8 <scalbnf+0xbc>
 8003770:	ee10 3a10 	vmov	r3, s0
 8003774:	eeb0 7a67 	vmov.f32	s14, s15
 8003778:	2b00      	cmp	r3, #0
 800377a:	bfb8      	it	lt
 800377c:	eef0 7a66 	vmovlt.f32	s15, s13
 8003780:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003784:	4770      	bx	lr
 8003786:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80037ec <scalbnf+0xc0>
 800378a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800378e:	4770      	bx	lr
 8003790:	0dd2      	lsrs	r2, r2, #23
 8003792:	e7e5      	b.n	8003760 <scalbnf+0x34>
 8003794:	4410      	add	r0, r2
 8003796:	28fe      	cmp	r0, #254	@ 0xfe
 8003798:	dce6      	bgt.n	8003768 <scalbnf+0x3c>
 800379a:	2800      	cmp	r0, #0
 800379c:	dd06      	ble.n	80037ac <scalbnf+0x80>
 800379e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80037a2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80037a6:	ee00 3a10 	vmov	s0, r3
 80037aa:	4770      	bx	lr
 80037ac:	f110 0f16 	cmn.w	r0, #22
 80037b0:	da09      	bge.n	80037c6 <scalbnf+0x9a>
 80037b2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80037ec <scalbnf+0xc0>
 80037b6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80037f0 <scalbnf+0xc4>
 80037ba:	ee10 3a10 	vmov	r3, s0
 80037be:	eeb0 7a67 	vmov.f32	s14, s15
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	e7d9      	b.n	800377a <scalbnf+0x4e>
 80037c6:	3019      	adds	r0, #25
 80037c8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80037cc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80037d0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80037f4 <scalbnf+0xc8>
 80037d4:	ee07 3a90 	vmov	s15, r3
 80037d8:	e7d7      	b.n	800378a <scalbnf+0x5e>
 80037da:	bf00      	nop
 80037dc:	ffff3cb0 	.word	0xffff3cb0
 80037e0:	4c000000 	.word	0x4c000000
 80037e4:	7149f2ca 	.word	0x7149f2ca
 80037e8:	f149f2ca 	.word	0xf149f2ca
 80037ec:	0da24260 	.word	0x0da24260
 80037f0:	8da24260 	.word	0x8da24260
 80037f4:	33000000 	.word	0x33000000

080037f8 <floorf>:
 80037f8:	ee10 3a10 	vmov	r3, s0
 80037fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8003800:	3a7f      	subs	r2, #127	@ 0x7f
 8003802:	2a16      	cmp	r2, #22
 8003804:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003808:	dc2b      	bgt.n	8003862 <floorf+0x6a>
 800380a:	2a00      	cmp	r2, #0
 800380c:	da12      	bge.n	8003834 <floorf+0x3c>
 800380e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003874 <floorf+0x7c>
 8003812:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003816:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381e:	dd06      	ble.n	800382e <floorf+0x36>
 8003820:	2b00      	cmp	r3, #0
 8003822:	da24      	bge.n	800386e <floorf+0x76>
 8003824:	2900      	cmp	r1, #0
 8003826:	4b14      	ldr	r3, [pc, #80]	@ (8003878 <floorf+0x80>)
 8003828:	bf08      	it	eq
 800382a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800382e:	ee00 3a10 	vmov	s0, r3
 8003832:	4770      	bx	lr
 8003834:	4911      	ldr	r1, [pc, #68]	@ (800387c <floorf+0x84>)
 8003836:	4111      	asrs	r1, r2
 8003838:	420b      	tst	r3, r1
 800383a:	d0fa      	beq.n	8003832 <floorf+0x3a>
 800383c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8003874 <floorf+0x7c>
 8003840:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003844:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384c:	ddef      	ble.n	800382e <floorf+0x36>
 800384e:	2b00      	cmp	r3, #0
 8003850:	bfbe      	ittt	lt
 8003852:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8003856:	fa40 f202 	asrlt.w	r2, r0, r2
 800385a:	189b      	addlt	r3, r3, r2
 800385c:	ea23 0301 	bic.w	r3, r3, r1
 8003860:	e7e5      	b.n	800382e <floorf+0x36>
 8003862:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8003866:	d3e4      	bcc.n	8003832 <floorf+0x3a>
 8003868:	ee30 0a00 	vadd.f32	s0, s0, s0
 800386c:	4770      	bx	lr
 800386e:	2300      	movs	r3, #0
 8003870:	e7dd      	b.n	800382e <floorf+0x36>
 8003872:	bf00      	nop
 8003874:	7149f2ca 	.word	0x7149f2ca
 8003878:	bf800000 	.word	0xbf800000
 800387c:	007fffff 	.word	0x007fffff

08003880 <_init>:
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003882:	bf00      	nop
 8003884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003886:	bc08      	pop	{r3}
 8003888:	469e      	mov	lr, r3
 800388a:	4770      	bx	lr

0800388c <_fini>:
 800388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388e:	bf00      	nop
 8003890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003892:	bc08      	pop	{r3}
 8003894:	469e      	mov	lr, r3
 8003896:	4770      	bx	lr
